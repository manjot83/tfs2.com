#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonnelRecordsMigrator.New
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="dev_tfs2.com")]
	public partial class NewDatabase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAircraftMD(AircraftMD instance);
    partial void UpdateAircraftMD(AircraftMD instance);
    partial void DeleteAircraftMD(AircraftMD instance);
    partial void InsertCertificate(Certificate instance);
    partial void UpdateCertificate(Certificate instance);
    partial void DeleteCertificate(Certificate instance);
    partial void InsertFlightLog(FlightLog instance);
    partial void UpdateFlightLog(FlightLog instance);
    partial void DeleteFlightLog(FlightLog instance);
    partial void InsertFlightProgram(FlightProgram instance);
    partial void UpdateFlightProgram(FlightProgram instance);
    partial void DeleteFlightProgram(FlightProgram instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMessagesForUser(MessagesForUser instance);
    partial void UpdateMessagesForUser(MessagesForUser instance);
    partial void DeleteMessagesForUser(MessagesForUser instance);
    partial void InsertMission(Mission instance);
    partial void UpdateMission(Mission instance);
    partial void DeleteMission(Mission instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertProgramLocation(ProgramLocation instance);
    partial void UpdateProgramLocation(ProgramLocation instance);
    partial void DeleteProgramLocation(ProgramLocation instance);
    partial void InsertQualification(Qualification instance);
    partial void UpdateQualification(Qualification instance);
    partial void DeleteQualification(Qualification instance);
    partial void InsertQualificationsCertificate(QualificationsCertificate instance);
    partial void UpdateQualificationsCertificate(QualificationsCertificate instance);
    partial void DeleteQualificationsCertificate(QualificationsCertificate instance);
    partial void InsertSquadronLog(SquadronLog instance);
    partial void UpdateSquadronLog(SquadronLog instance);
    partial void DeleteSquadronLog(SquadronLog instance);
    partial void InsertStaticImage(StaticImage instance);
    partial void UpdateStaticImage(StaticImage instance);
    partial void DeleteStaticImage(StaticImage instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public NewDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NewDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NewDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NewDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AircraftMD> AircraftMDS
		{
			get
			{
				return this.GetTable<AircraftMD>();
			}
		}
		
		public System.Data.Linq.Table<Certificate> Certificates
		{
			get
			{
				return this.GetTable<Certificate>();
			}
		}
		
		public System.Data.Linq.Table<FlightLog> FlightLogs
		{
			get
			{
				return this.GetTable<FlightLog>();
			}
		}
		
		public System.Data.Linq.Table<FlightProgram> FlightPrograms
		{
			get
			{
				return this.GetTable<FlightProgram>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MessagesForUser> MessagesForUsers
		{
			get
			{
				return this.GetTable<MessagesForUser>();
			}
		}
		
		public System.Data.Linq.Table<Mission> Missions
		{
			get
			{
				return this.GetTable<Mission>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PageStaticImage> PageStaticImages
		{
			get
			{
				return this.GetTable<PageStaticImage>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<ProgramLocation> ProgramLocations
		{
			get
			{
				return this.GetTable<ProgramLocation>();
			}
		}
		
		public System.Data.Linq.Table<Qualification> Qualifications
		{
			get
			{
				return this.GetTable<Qualification>();
			}
		}
		
		public System.Data.Linq.Table<QualificationsCertificate> QualificationsCertificates
		{
			get
			{
				return this.GetTable<QualificationsCertificate>();
			}
		}
		
		public System.Data.Linq.Table<Schema_info> Schema_infos
		{
			get
			{
				return this.GetTable<Schema_info>();
			}
		}
		
		public System.Data.Linq.Table<SquadronLog> SquadronLogs
		{
			get
			{
				return this.GetTable<SquadronLog>();
			}
		}
		
		public System.Data.Linq.Table<StaticImage> StaticImages
		{
			get
			{
				return this.GetTable<StaticImage>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.AircraftMDS")]
	public partial class AircraftMD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AircraftMD()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Certificates")]
	public partial class Certificate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _Type;
		
		private string _Name;
		
		private EntitySet<QualificationsCertificate> _QualificationsCertificates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Certificate()
		{
			this._QualificationsCertificates = new EntitySet<QualificationsCertificate>(new Action<QualificationsCertificate>(this.attach_QualificationsCertificates), new Action<QualificationsCertificate>(this.detach_QualificationsCertificates));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_QualificationsCertificates_Certificates", Storage="_QualificationsCertificates", ThisKey="Id", OtherKey="CertificateId", DeleteRule="NO ACTION")]
		public EntitySet<QualificationsCertificate> QualificationsCertificates
		{
			get
			{
				return this._QualificationsCertificates;
			}
			set
			{
				this._QualificationsCertificates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QualificationsCertificates(QualificationsCertificate entity)
		{
			this.SendPropertyChanging();
			entity.Certificate = this;
		}
		
		private void detach_QualificationsCertificates(QualificationsCertificate entity)
		{
			this.SendPropertyChanging();
			entity.Certificate = null;
		}
	}
	
	[Table(Name="dbo.FlightLogs")]
	public partial class FlightLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _LogDate;
		
		private System.DateTime _LastModifiedDate;
		
		private string _AircraftMDS;
		
		private string _AircraftSerialNumber;
		
		private System.Guid _ProgramLocationId;
		
		private EntityRef<ProgramLocation> _ProgramLocation;
		
		private EntitySet<Mission> _Missions;
		
		private EntitySet<SquadronLog> _SquadronLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnAircraftMDSChanging(string value);
    partial void OnAircraftMDSChanged();
    partial void OnAircraftSerialNumberChanging(string value);
    partial void OnAircraftSerialNumberChanged();
    partial void OnProgramLocationIdChanging(System.Guid value);
    partial void OnProgramLocationIdChanged();
    #endregion
		
		public FlightLog()
		{
			this._ProgramLocation = default(EntityRef<ProgramLocation>);
			this._Missions = new EntitySet<Mission>(new Action<Mission>(this.attach_Missions), new Action<Mission>(this.detach_Missions));
			this._SquadronLogs = new EntitySet<SquadronLog>(new Action<SquadronLog>(this.attach_SquadronLogs), new Action<SquadronLog>(this.detach_SquadronLogs));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_AircraftMDS", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AircraftMDS
		{
			get
			{
				return this._AircraftMDS;
			}
			set
			{
				if ((this._AircraftMDS != value))
				{
					this.OnAircraftMDSChanging(value);
					this.SendPropertyChanging();
					this._AircraftMDS = value;
					this.SendPropertyChanged("AircraftMDS");
					this.OnAircraftMDSChanged();
				}
			}
		}
		
		[Column(Storage="_AircraftSerialNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AircraftSerialNumber
		{
			get
			{
				return this._AircraftSerialNumber;
			}
			set
			{
				if ((this._AircraftSerialNumber != value))
				{
					this.OnAircraftSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._AircraftSerialNumber = value;
					this.SendPropertyChanged("AircraftSerialNumber");
					this.OnAircraftSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ProgramLocationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgramLocationId
		{
			get
			{
				return this._ProgramLocationId;
			}
			set
			{
				if ((this._ProgramLocationId != value))
				{
					if (this._ProgramLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramLocationIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramLocationId = value;
					this.SendPropertyChanged("ProgramLocationId");
					this.OnProgramLocationIdChanged();
				}
			}
		}
		
		[Association(Name="FK_FlightLogs_ProgramLocations", Storage="_ProgramLocation", ThisKey="ProgramLocationId", OtherKey="Id", IsForeignKey=true)]
		public ProgramLocation ProgramLocation
		{
			get
			{
				return this._ProgramLocation.Entity;
			}
			set
			{
				ProgramLocation previousValue = this._ProgramLocation.Entity;
				if (((previousValue != value) 
							|| (this._ProgramLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramLocation.Entity = null;
						previousValue.FlightLogs.Remove(this);
					}
					this._ProgramLocation.Entity = value;
					if ((value != null))
					{
						value.FlightLogs.Add(this);
						this._ProgramLocationId = value.Id;
					}
					else
					{
						this._ProgramLocationId = default(System.Guid);
					}
					this.SendPropertyChanged("ProgramLocation");
				}
			}
		}
		
		[Association(Name="FK_Missions_FlightLogs", Storage="_Missions", ThisKey="Id", OtherKey="FlightLogId", DeleteRule="NO ACTION")]
		public EntitySet<Mission> Missions
		{
			get
			{
				return this._Missions;
			}
			set
			{
				this._Missions.Assign(value);
			}
		}
		
		[Association(Name="FK_SquadronLogs_FlightLogs", Storage="_SquadronLogs", ThisKey="Id", OtherKey="FlightLogId", DeleteRule="NO ACTION")]
		public EntitySet<SquadronLog> SquadronLogs
		{
			get
			{
				return this._SquadronLogs;
			}
			set
			{
				this._SquadronLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Missions(Mission entity)
		{
			this.SendPropertyChanging();
			entity.FlightLog = this;
		}
		
		private void detach_Missions(Mission entity)
		{
			this.SendPropertyChanging();
			entity.FlightLog = null;
		}
		
		private void attach_SquadronLogs(SquadronLog entity)
		{
			this.SendPropertyChanging();
			entity.FlightLog = this;
		}
		
		private void detach_SquadronLogs(SquadronLog entity)
		{
			this.SendPropertyChanging();
			entity.FlightLog = null;
		}
	}
	
	[Table(Name="dbo.FlightPrograms")]
	public partial class FlightProgram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _AccountName;
		
		private bool _Active;
		
		private EntitySet<ProgramLocation> _ProgramLocations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public FlightProgram()
		{
			this._ProgramLocations = new EntitySet<ProgramLocation>(new Action<ProgramLocation>(this.attach_ProgramLocations), new Action<ProgramLocation>(this.detach_ProgramLocations));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_AccountName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="FK_ProgramLocations_FlightPrograms", Storage="_ProgramLocations", ThisKey="Id", OtherKey="FlightProgramId", DeleteRule="NO ACTION")]
		public EntitySet<ProgramLocation> ProgramLocations
		{
			get
			{
				return this._ProgramLocations;
			}
			set
			{
				this._ProgramLocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgramLocations(ProgramLocation entity)
		{
			this.SendPropertyChanging();
			entity.FlightProgram = this;
		}
		
		private void detach_ProgramLocations(ProgramLocation entity)
		{
			this.SendPropertyChanging();
			entity.FlightProgram = null;
		}
	}
	
	[Table(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _MessageType;
		
		private string _Title;
		
		private System.DateTime _ActiveFromDate;
		
		private System.DateTime _ActiveToDate;
		
		private string _Content;
		
		private System.Nullable<bool> _Urgent;
		
		private System.Nullable<System.Guid> _Announcement_CreatedBy;
		
		private System.Nullable<System.Guid> _UserAlert_UserId;
		
		private EntityRef<User> _User;
		
		private EntitySet<MessagesForUser> _MessagesForUsers;
		
		private EntityRef<User> _UserAlert_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnMessageTypeChanging(int value);
    partial void OnMessageTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActiveFromDateChanging(System.DateTime value);
    partial void OnActiveFromDateChanged();
    partial void OnActiveToDateChanging(System.DateTime value);
    partial void OnActiveToDateChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnUrgentChanging(System.Nullable<bool> value);
    partial void OnUrgentChanged();
    partial void OnAnnouncement_CreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnAnnouncement_CreatedByChanged();
    partial void OnUserAlert_UserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserAlert_UserIdChanged();
    #endregion
		
		public Message()
		{
			this._User = default(EntityRef<User>);
			this._MessagesForUsers = new EntitySet<MessagesForUser>(new Action<MessagesForUser>(this.attach_MessagesForUsers), new Action<MessagesForUser>(this.detach_MessagesForUsers));
			this._UserAlert_User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_MessageType", DbType="Int NOT NULL")]
		public int MessageType
		{
			get
			{
				return this._MessageType;
			}
			set
			{
				if ((this._MessageType != value))
				{
					this.OnMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._MessageType = value;
					this.SendPropertyChanged("MessageType");
					this.OnMessageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ActiveFromDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime ActiveFromDate
		{
			get
			{
				return this._ActiveFromDate;
			}
			set
			{
				if ((this._ActiveFromDate != value))
				{
					this.OnActiveFromDateChanging(value);
					this.SendPropertyChanging();
					this._ActiveFromDate = value;
					this.SendPropertyChanged("ActiveFromDate");
					this.OnActiveFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActiveToDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime ActiveToDate
		{
			get
			{
				return this._ActiveToDate;
			}
			set
			{
				if ((this._ActiveToDate != value))
				{
					this.OnActiveToDateChanging(value);
					this.SendPropertyChanging();
					this._ActiveToDate = value;
					this.SendPropertyChanged("ActiveToDate");
					this.OnActiveToDateChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_Urgent", DbType="Bit")]
		public System.Nullable<bool> Urgent
		{
			get
			{
				return this._Urgent;
			}
			set
			{
				if ((this._Urgent != value))
				{
					this.OnUrgentChanging(value);
					this.SendPropertyChanging();
					this._Urgent = value;
					this.SendPropertyChanged("Urgent");
					this.OnUrgentChanged();
				}
			}
		}
		
		[Column(Storage="_Announcement_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Announcement_CreatedBy
		{
			get
			{
				return this._Announcement_CreatedBy;
			}
			set
			{
				if ((this._Announcement_CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnnouncement_CreatedByChanging(value);
					this.SendPropertyChanging();
					this._Announcement_CreatedBy = value;
					this.SendPropertyChanged("Announcement_CreatedBy");
					this.OnAnnouncement_CreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_UserAlert_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserAlert_UserId
		{
			get
			{
				return this._UserAlert_UserId;
			}
			set
			{
				if ((this._UserAlert_UserId != value))
				{
					if (this._UserAlert_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAlert_UserIdChanging(value);
					this.SendPropertyChanging();
					this._UserAlert_UserId = value;
					this.SendPropertyChanged("UserAlert_UserId");
					this.OnUserAlert_UserIdChanged();
				}
			}
		}
		
		[Association(Name="FK_Announcement_Messages_Users", Storage="_User", ThisKey="Announcement_CreatedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._Announcement_CreatedBy = value.Id;
					}
					else
					{
						this._Announcement_CreatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="FK_MessagesForUsers_Messages", Storage="_MessagesForUsers", ThisKey="Id", OtherKey="MessageId", DeleteRule="NO ACTION")]
		public EntitySet<MessagesForUser> MessagesForUsers
		{
			get
			{
				return this._MessagesForUsers;
			}
			set
			{
				this._MessagesForUsers.Assign(value);
			}
		}
		
		[Association(Name="FK_UserAlert_Messages_Users", Storage="_UserAlert_User", ThisKey="UserAlert_UserId", OtherKey="Id", IsForeignKey=true)]
		public User UserAlert_User
		{
			get
			{
				return this._UserAlert_User.Entity;
			}
			set
			{
				User previousValue = this._UserAlert_User.Entity;
				if (((previousValue != value) 
							|| (this._UserAlert_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAlert_User.Entity = null;
						previousValue.UserAlert_Messages_Users.Remove(this);
					}
					this._UserAlert_User.Entity = value;
					if ((value != null))
					{
						value.UserAlert_Messages_Users.Add(this);
						this._UserAlert_UserId = value.Id;
					}
					else
					{
						this._UserAlert_UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UserAlert_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessagesForUsers(MessagesForUser entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_MessagesForUsers(MessagesForUser entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[Table(Name="dbo.MessagesForUsers")]
	public partial class MessagesForUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _MessageId;
		
		private System.DateTime _SeenAtDate;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnMessageIdChanging(System.Guid value);
    partial void OnMessageIdChanged();
    partial void OnSeenAtDateChanging(System.DateTime value);
    partial void OnSeenAtDateChanged();
    #endregion
		
		public MessagesForUser()
		{
			this._Message = default(EntityRef<Message>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_MessageId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[Column(Storage="_SeenAtDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime SeenAtDate
		{
			get
			{
				return this._SeenAtDate;
			}
			set
			{
				if ((this._SeenAtDate != value))
				{
					this.OnSeenAtDateChanging(value);
					this.SendPropertyChanging();
					this._SeenAtDate = value;
					this.SendPropertyChanged("SeenAtDate");
					this.OnSeenAtDateChanged();
				}
			}
		}
		
		[Association(Name="FK_MessagesForUsers_Messages", Storage="_Message", ThisKey="MessageId", OtherKey="Id", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessagesForUsers.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessagesForUsers.Add(this);
						this._MessageId = value.Id;
					}
					else
					{
						this._MessageId = default(System.Guid);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[Association(Name="FK_MessagesForUsers_Users", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MessagesForUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MessagesForUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Missions")]
	public partial class Mission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _AdditionalInfo;
		
		private string _FromICAO;
		
		private string _ToICAO;
		
		private string _TakeOffTime;
		
		private string _LandingTime;
		
		private int _TouchAndGos;
		
		private int _FullStops;
		
		private int _Sorties;
		
		private int _Totals;
		
		private System.Guid _FlightLogId;
		
		private EntityRef<FlightLog> _FlightLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    partial void OnFromICAOChanging(string value);
    partial void OnFromICAOChanged();
    partial void OnToICAOChanging(string value);
    partial void OnToICAOChanged();
    partial void OnTakeOffTimeChanging(string value);
    partial void OnTakeOffTimeChanged();
    partial void OnLandingTimeChanging(string value);
    partial void OnLandingTimeChanged();
    partial void OnTouchAndGosChanging(int value);
    partial void OnTouchAndGosChanged();
    partial void OnFullStopsChanging(int value);
    partial void OnFullStopsChanged();
    partial void OnSortiesChanging(int value);
    partial void OnSortiesChanged();
    partial void OnTotalsChanging(int value);
    partial void OnTotalsChanged();
    partial void OnFlightLogIdChanging(System.Guid value);
    partial void OnFlightLogIdChanged();
    #endregion
		
		public Mission()
		{
			this._FlightLog = default(EntityRef<FlightLog>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalInfo", DbType="NVarChar(100)")]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		[Column(Storage="_FromICAO", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string FromICAO
		{
			get
			{
				return this._FromICAO;
			}
			set
			{
				if ((this._FromICAO != value))
				{
					this.OnFromICAOChanging(value);
					this.SendPropertyChanging();
					this._FromICAO = value;
					this.SendPropertyChanged("FromICAO");
					this.OnFromICAOChanged();
				}
			}
		}
		
		[Column(Storage="_ToICAO", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string ToICAO
		{
			get
			{
				return this._ToICAO;
			}
			set
			{
				if ((this._ToICAO != value))
				{
					this.OnToICAOChanging(value);
					this.SendPropertyChanging();
					this._ToICAO = value;
					this.SendPropertyChanged("ToICAO");
					this.OnToICAOChanged();
				}
			}
		}
		
		[Column(Storage="_TakeOffTime", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string TakeOffTime
		{
			get
			{
				return this._TakeOffTime;
			}
			set
			{
				if ((this._TakeOffTime != value))
				{
					this.OnTakeOffTimeChanging(value);
					this.SendPropertyChanging();
					this._TakeOffTime = value;
					this.SendPropertyChanged("TakeOffTime");
					this.OnTakeOffTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LandingTime", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string LandingTime
		{
			get
			{
				return this._LandingTime;
			}
			set
			{
				if ((this._LandingTime != value))
				{
					this.OnLandingTimeChanging(value);
					this.SendPropertyChanging();
					this._LandingTime = value;
					this.SendPropertyChanged("LandingTime");
					this.OnLandingTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TouchAndGos", DbType="Int NOT NULL")]
		public int TouchAndGos
		{
			get
			{
				return this._TouchAndGos;
			}
			set
			{
				if ((this._TouchAndGos != value))
				{
					this.OnTouchAndGosChanging(value);
					this.SendPropertyChanging();
					this._TouchAndGos = value;
					this.SendPropertyChanged("TouchAndGos");
					this.OnTouchAndGosChanged();
				}
			}
		}
		
		[Column(Storage="_FullStops", DbType="Int NOT NULL")]
		public int FullStops
		{
			get
			{
				return this._FullStops;
			}
			set
			{
				if ((this._FullStops != value))
				{
					this.OnFullStopsChanging(value);
					this.SendPropertyChanging();
					this._FullStops = value;
					this.SendPropertyChanged("FullStops");
					this.OnFullStopsChanged();
				}
			}
		}
		
		[Column(Storage="_Sorties", DbType="Int NOT NULL")]
		public int Sorties
		{
			get
			{
				return this._Sorties;
			}
			set
			{
				if ((this._Sorties != value))
				{
					this.OnSortiesChanging(value);
					this.SendPropertyChanging();
					this._Sorties = value;
					this.SendPropertyChanged("Sorties");
					this.OnSortiesChanged();
				}
			}
		}
		
		[Column(Storage="_Totals", DbType="Int NOT NULL")]
		public int Totals
		{
			get
			{
				return this._Totals;
			}
			set
			{
				if ((this._Totals != value))
				{
					this.OnTotalsChanging(value);
					this.SendPropertyChanging();
					this._Totals = value;
					this.SendPropertyChanged("Totals");
					this.OnTotalsChanged();
				}
			}
		}
		
		[Column(Storage="_FlightLogId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FlightLogId
		{
			get
			{
				return this._FlightLogId;
			}
			set
			{
				if ((this._FlightLogId != value))
				{
					if (this._FlightLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlightLogIdChanging(value);
					this.SendPropertyChanging();
					this._FlightLogId = value;
					this.SendPropertyChanged("FlightLogId");
					this.OnFlightLogIdChanged();
				}
			}
		}
		
		[Association(Name="FK_Missions_FlightLogs", Storage="_FlightLog", ThisKey="FlightLogId", OtherKey="Id", IsForeignKey=true)]
		public FlightLog FlightLog
		{
			get
			{
				return this._FlightLog.Entity;
			}
			set
			{
				FlightLog previousValue = this._FlightLog.Entity;
				if (((previousValue != value) 
							|| (this._FlightLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightLog.Entity = null;
						previousValue.Missions.Remove(this);
					}
					this._FlightLog.Entity = value;
					if ((value != null))
					{
						value.Missions.Add(this);
						this._FlightLogId = value.Id;
					}
					else
					{
						this._FlightLogId = default(System.Guid);
					}
					this.SendPropertyChanged("FlightLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _URI;
		
		private string _Title;
		
		private string _Content;
		
		private string _BannerFileName;
		
		private string _HeaderFileName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnURIChanging(string value);
    partial void OnURIChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnBannerFileNameChanging(string value);
    partial void OnBannerFileNameChanged();
    partial void OnHeaderFileNameChanging(string value);
    partial void OnHeaderFileNameChanged();
    #endregion
		
		public Page()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_URI", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this.OnURIChanging(value);
					this.SendPropertyChanging();
					this._URI = value;
					this.SendPropertyChanged("URI");
					this.OnURIChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_BannerFileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string BannerFileName
		{
			get
			{
				return this._BannerFileName;
			}
			set
			{
				if ((this._BannerFileName != value))
				{
					this.OnBannerFileNameChanging(value);
					this.SendPropertyChanging();
					this._BannerFileName = value;
					this.SendPropertyChanged("BannerFileName");
					this.OnBannerFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderFileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string HeaderFileName
		{
			get
			{
				return this._HeaderFileName;
			}
			set
			{
				if ((this._HeaderFileName != value))
				{
					this.OnHeaderFileNameChanging(value);
					this.SendPropertyChanging();
					this._HeaderFileName = value;
					this.SendPropertyChanged("HeaderFileName");
					this.OnHeaderFileNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PageStaticImages")]
	public partial class PageStaticImage
	{
		
		private System.Guid _PageId;
		
		private System.Guid _StaticImageId;
		
		public PageStaticImage()
		{
		}
		
		[Column(Storage="_PageId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this._PageId = value;
				}
			}
		}
		
		[Column(Storage="_StaticImageId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaticImageId
		{
			get
			{
				return this._StaticImageId;
			}
			set
			{
				if ((this._StaticImageId != value))
				{
					this._StaticImageId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Persons")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private string _StreetAddress;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _MiddleInitial;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<int> _Gender;
		
		private string _SocialSecurityLastFour;
		
		private string _PrimaryPhoneNumber;
		
		private string _AlternatePhoneNumber;
		
		private string _EmergencyContactName;
		
		private string _EmergencyContactPhoneNumber;
		
		private System.Nullable<int> _ShirtSize;
		
		private System.Nullable<int> _FlightSuitSize;
		
		private System.Nullable<System.Guid> _HirePositionId;
		
		private string _AlternateEmail;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<User> _User;
		
		private EntityRef<Qualification> _Qualification;
		
		private EntitySet<SquadronLog> _SquadronLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnMiddleInitialChanging(string value);
    partial void OnMiddleInitialChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(System.Nullable<int> value);
    partial void OnGenderChanged();
    partial void OnSocialSecurityLastFourChanging(string value);
    partial void OnSocialSecurityLastFourChanged();
    partial void OnPrimaryPhoneNumberChanging(string value);
    partial void OnPrimaryPhoneNumberChanged();
    partial void OnAlternatePhoneNumberChanging(string value);
    partial void OnAlternatePhoneNumberChanged();
    partial void OnEmergencyContactNameChanging(string value);
    partial void OnEmergencyContactNameChanged();
    partial void OnEmergencyContactPhoneNumberChanging(string value);
    partial void OnEmergencyContactPhoneNumberChanged();
    partial void OnShirtSizeChanging(System.Nullable<int> value);
    partial void OnShirtSizeChanged();
    partial void OnFlightSuitSizeChanging(System.Nullable<int> value);
    partial void OnFlightSuitSizeChanged();
    partial void OnHirePositionIdChanging(System.Nullable<System.Guid> value);
    partial void OnHirePositionIdChanged();
    partial void OnAlternateEmailChanging(string value);
    partial void OnAlternateEmailChanged();
    #endregion
		
		public Person()
		{
			this._Position = default(EntityRef<Position>);
			this._User = default(EntityRef<User>);
			this._Qualification = default(EntityRef<Qualification>);
			this._SquadronLogs = new EntitySet<SquadronLog>(new Action<SquadronLog>(this.attach_SquadronLogs), new Action<SquadronLog>(this.detach_SquadronLogs));
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_StreetAddress", DbType="NVarChar(100)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="NVarChar(5)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleInitial", DbType="NVarChar(50)")]
		public string MiddleInitial
		{
			get
			{
				return this._MiddleInitial;
			}
			set
			{
				if ((this._MiddleInitial != value))
				{
					this.OnMiddleInitialChanging(value);
					this.SendPropertyChanging();
					this._MiddleInitial = value;
					this.SendPropertyChanged("MiddleInitial");
					this.OnMiddleInitialChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfBirth", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Int")]
		public System.Nullable<int> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_SocialSecurityLastFour", DbType="NVarChar(4)")]
		public string SocialSecurityLastFour
		{
			get
			{
				return this._SocialSecurityLastFour;
			}
			set
			{
				if ((this._SocialSecurityLastFour != value))
				{
					this.OnSocialSecurityLastFourChanging(value);
					this.SendPropertyChanging();
					this._SocialSecurityLastFour = value;
					this.SendPropertyChanged("SocialSecurityLastFour");
					this.OnSocialSecurityLastFourChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhoneNumber", DbType="NVarChar(10)")]
		public string PrimaryPhoneNumber
		{
			get
			{
				return this._PrimaryPhoneNumber;
			}
			set
			{
				if ((this._PrimaryPhoneNumber != value))
				{
					this.OnPrimaryPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhoneNumber = value;
					this.SendPropertyChanged("PrimaryPhoneNumber");
					this.OnPrimaryPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AlternatePhoneNumber", DbType="NVarChar(10)")]
		public string AlternatePhoneNumber
		{
			get
			{
				return this._AlternatePhoneNumber;
			}
			set
			{
				if ((this._AlternatePhoneNumber != value))
				{
					this.OnAlternatePhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._AlternatePhoneNumber = value;
					this.SendPropertyChanged("AlternatePhoneNumber");
					this.OnAlternatePhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_EmergencyContactName", DbType="NVarChar(50)")]
		public string EmergencyContactName
		{
			get
			{
				return this._EmergencyContactName;
			}
			set
			{
				if ((this._EmergencyContactName != value))
				{
					this.OnEmergencyContactNameChanging(value);
					this.SendPropertyChanging();
					this._EmergencyContactName = value;
					this.SendPropertyChanged("EmergencyContactName");
					this.OnEmergencyContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_EmergencyContactPhoneNumber", DbType="NVarChar(50)")]
		public string EmergencyContactPhoneNumber
		{
			get
			{
				return this._EmergencyContactPhoneNumber;
			}
			set
			{
				if ((this._EmergencyContactPhoneNumber != value))
				{
					this.OnEmergencyContactPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._EmergencyContactPhoneNumber = value;
					this.SendPropertyChanged("EmergencyContactPhoneNumber");
					this.OnEmergencyContactPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ShirtSize", DbType="Int")]
		public System.Nullable<int> ShirtSize
		{
			get
			{
				return this._ShirtSize;
			}
			set
			{
				if ((this._ShirtSize != value))
				{
					this.OnShirtSizeChanging(value);
					this.SendPropertyChanging();
					this._ShirtSize = value;
					this.SendPropertyChanged("ShirtSize");
					this.OnShirtSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FlightSuitSize", DbType="Int")]
		public System.Nullable<int> FlightSuitSize
		{
			get
			{
				return this._FlightSuitSize;
			}
			set
			{
				if ((this._FlightSuitSize != value))
				{
					this.OnFlightSuitSizeChanging(value);
					this.SendPropertyChanging();
					this._FlightSuitSize = value;
					this.SendPropertyChanged("FlightSuitSize");
					this.OnFlightSuitSizeChanged();
				}
			}
		}
		
		[Column(Storage="_HirePositionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> HirePositionId
		{
			get
			{
				return this._HirePositionId;
			}
			set
			{
				if ((this._HirePositionId != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHirePositionIdChanging(value);
					this.SendPropertyChanging();
					this._HirePositionId = value;
					this.SendPropertyChanged("HirePositionId");
					this.OnHirePositionIdChanged();
				}
			}
		}
		
		[Column(Storage="_AlternateEmail", DbType="NVarChar(254)")]
		public string AlternateEmail
		{
			get
			{
				return this._AlternateEmail;
			}
			set
			{
				if ((this._AlternateEmail != value))
				{
					this.OnAlternateEmailChanging(value);
					this.SendPropertyChanging();
					this._AlternateEmail = value;
					this.SendPropertyChanged("AlternateEmail");
					this.OnAlternateEmailChanged();
				}
			}
		}
		
		[Association(Name="FK_Persons_Positions", Storage="_Position", ThisKey="HirePositionId", OtherKey="Id", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._HirePositionId = value.Id;
					}
					else
					{
						this._HirePositionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[Association(Name="FK_Persons_Users", Storage="_User", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Person = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Person = this;
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="FK_Qualifications_Person", Storage="_Qualification", ThisKey="PersonId", OtherKey="PersonId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public Qualification Qualification
		{
			get
			{
				return this._Qualification.Entity;
			}
			set
			{
				Qualification previousValue = this._Qualification.Entity;
				if (((previousValue != value) 
							|| (this._Qualification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualification.Entity = null;
						previousValue.Person = null;
					}
					this._Qualification.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Qualification");
				}
			}
		}
		
		[Association(Name="FK_SquadronLogs_Persons", Storage="_SquadronLogs", ThisKey="PersonId", OtherKey="PersonId", DeleteRule="NO ACTION")]
		public EntitySet<SquadronLog> SquadronLogs
		{
			get
			{
				return this._SquadronLogs;
			}
			set
			{
				this._SquadronLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SquadronLogs(SquadronLog entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_SquadronLogs(SquadronLog entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="dbo.Positions")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Title;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Position()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_Persons_Positions", Storage="_Persons", ThisKey="Id", OtherKey="HirePositionId", DeleteRule="NO ACTION")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[Table(Name="dbo.ProgramLocations")]
	public partial class ProgramLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _FlightProgramId;
		
		private EntitySet<FlightLog> _FlightLogs;
		
		private EntityRef<FlightProgram> _FlightProgram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFlightProgramIdChanging(System.Guid value);
    partial void OnFlightProgramIdChanged();
    #endregion
		
		public ProgramLocation()
		{
			this._FlightLogs = new EntitySet<FlightLog>(new Action<FlightLog>(this.attach_FlightLogs), new Action<FlightLog>(this.detach_FlightLogs));
			this._FlightProgram = default(EntityRef<FlightProgram>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FlightProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FlightProgramId
		{
			get
			{
				return this._FlightProgramId;
			}
			set
			{
				if ((this._FlightProgramId != value))
				{
					if (this._FlightProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlightProgramIdChanging(value);
					this.SendPropertyChanging();
					this._FlightProgramId = value;
					this.SendPropertyChanged("FlightProgramId");
					this.OnFlightProgramIdChanged();
				}
			}
		}
		
		[Association(Name="FK_FlightLogs_ProgramLocations", Storage="_FlightLogs", ThisKey="Id", OtherKey="ProgramLocationId", DeleteRule="NO ACTION")]
		public EntitySet<FlightLog> FlightLogs
		{
			get
			{
				return this._FlightLogs;
			}
			set
			{
				this._FlightLogs.Assign(value);
			}
		}
		
		[Association(Name="FK_ProgramLocations_FlightPrograms", Storage="_FlightProgram", ThisKey="FlightProgramId", OtherKey="Id", IsForeignKey=true)]
		public FlightProgram FlightProgram
		{
			get
			{
				return this._FlightProgram.Entity;
			}
			set
			{
				FlightProgram previousValue = this._FlightProgram.Entity;
				if (((previousValue != value) 
							|| (this._FlightProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightProgram.Entity = null;
						previousValue.ProgramLocations.Remove(this);
					}
					this._FlightProgram.Entity = value;
					if ((value != null))
					{
						value.ProgramLocations.Add(this);
						this._FlightProgramId = value.Id;
					}
					else
					{
						this._FlightProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("FlightProgram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightLogs(FlightLog entity)
		{
			this.SendPropertyChanging();
			entity.ProgramLocation = this;
		}
		
		private void detach_FlightLogs(FlightLog entity)
		{
			this.SendPropertyChanging();
			entity.ProgramLocation = null;
		}
	}
	
	[Table(Name="dbo.Qualifications")]
	public partial class Qualification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private System.Nullable<int> _BranchOfService;
		
		private System.Nullable<int> _MilitaryFCFQualification;
		
		private System.Nullable<System.DateTime> _LastAltitudeChamber;
		
		private System.Nullable<System.DateTime> _LastBFR;
		
		private System.Nullable<System.DateTime> _LastCRM;
		
		private System.Nullable<System.DateTime> _LastEgreesTraining;
		
		private System.Nullable<System.DateTime> _LastFlight;
		
		private System.Nullable<System.DateTime> _LastLifeSupportTraining;
		
		private System.Nullable<System.DateTime> _LastMilitaryFlightPhysical;
		
		private System.Nullable<System.DateTime> _LastSimulatorRefresher;
		
		private EntityRef<Person> _Person;
		
		private EntitySet<QualificationsCertificate> _QualificationsCertificates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnBranchOfServiceChanging(System.Nullable<int> value);
    partial void OnBranchOfServiceChanged();
    partial void OnMilitaryFCFQualificationChanging(System.Nullable<int> value);
    partial void OnMilitaryFCFQualificationChanged();
    partial void OnLastAltitudeChamberChanging(System.Nullable<System.DateTime> value);
    partial void OnLastAltitudeChamberChanged();
    partial void OnLastBFRChanging(System.Nullable<System.DateTime> value);
    partial void OnLastBFRChanged();
    partial void OnLastCRMChanging(System.Nullable<System.DateTime> value);
    partial void OnLastCRMChanged();
    partial void OnLastEgreesTrainingChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEgreesTrainingChanged();
    partial void OnLastFlightChanging(System.Nullable<System.DateTime> value);
    partial void OnLastFlightChanged();
    partial void OnLastLifeSupportTrainingChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLifeSupportTrainingChanged();
    partial void OnLastMilitaryFlightPhysicalChanging(System.Nullable<System.DateTime> value);
    partial void OnLastMilitaryFlightPhysicalChanged();
    partial void OnLastSimulatorRefresherChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSimulatorRefresherChanged();
    #endregion
		
		public Qualification()
		{
			this._Person = default(EntityRef<Person>);
			this._QualificationsCertificates = new EntitySet<QualificationsCertificate>(new Action<QualificationsCertificate>(this.attach_QualificationsCertificates), new Action<QualificationsCertificate>(this.detach_QualificationsCertificates));
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_BranchOfService", DbType="Int")]
		public System.Nullable<int> BranchOfService
		{
			get
			{
				return this._BranchOfService;
			}
			set
			{
				if ((this._BranchOfService != value))
				{
					this.OnBranchOfServiceChanging(value);
					this.SendPropertyChanging();
					this._BranchOfService = value;
					this.SendPropertyChanged("BranchOfService");
					this.OnBranchOfServiceChanged();
				}
			}
		}
		
		[Column(Storage="_MilitaryFCFQualification", DbType="Int")]
		public System.Nullable<int> MilitaryFCFQualification
		{
			get
			{
				return this._MilitaryFCFQualification;
			}
			set
			{
				if ((this._MilitaryFCFQualification != value))
				{
					this.OnMilitaryFCFQualificationChanging(value);
					this.SendPropertyChanging();
					this._MilitaryFCFQualification = value;
					this.SendPropertyChanged("MilitaryFCFQualification");
					this.OnMilitaryFCFQualificationChanged();
				}
			}
		}
		
		[Column(Storage="_LastAltitudeChamber", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastAltitudeChamber
		{
			get
			{
				return this._LastAltitudeChamber;
			}
			set
			{
				if ((this._LastAltitudeChamber != value))
				{
					this.OnLastAltitudeChamberChanging(value);
					this.SendPropertyChanging();
					this._LastAltitudeChamber = value;
					this.SendPropertyChanged("LastAltitudeChamber");
					this.OnLastAltitudeChamberChanged();
				}
			}
		}
		
		[Column(Storage="_LastBFR", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastBFR
		{
			get
			{
				return this._LastBFR;
			}
			set
			{
				if ((this._LastBFR != value))
				{
					this.OnLastBFRChanging(value);
					this.SendPropertyChanging();
					this._LastBFR = value;
					this.SendPropertyChanged("LastBFR");
					this.OnLastBFRChanged();
				}
			}
		}
		
		[Column(Storage="_LastCRM", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastCRM
		{
			get
			{
				return this._LastCRM;
			}
			set
			{
				if ((this._LastCRM != value))
				{
					this.OnLastCRMChanging(value);
					this.SendPropertyChanging();
					this._LastCRM = value;
					this.SendPropertyChanged("LastCRM");
					this.OnLastCRMChanged();
				}
			}
		}
		
		[Column(Storage="_LastEgreesTraining", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastEgreesTraining
		{
			get
			{
				return this._LastEgreesTraining;
			}
			set
			{
				if ((this._LastEgreesTraining != value))
				{
					this.OnLastEgreesTrainingChanging(value);
					this.SendPropertyChanging();
					this._LastEgreesTraining = value;
					this.SendPropertyChanged("LastEgreesTraining");
					this.OnLastEgreesTrainingChanged();
				}
			}
		}
		
		[Column(Storage="_LastFlight", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastFlight
		{
			get
			{
				return this._LastFlight;
			}
			set
			{
				if ((this._LastFlight != value))
				{
					this.OnLastFlightChanging(value);
					this.SendPropertyChanging();
					this._LastFlight = value;
					this.SendPropertyChanged("LastFlight");
					this.OnLastFlightChanged();
				}
			}
		}
		
		[Column(Storage="_LastLifeSupportTraining", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastLifeSupportTraining
		{
			get
			{
				return this._LastLifeSupportTraining;
			}
			set
			{
				if ((this._LastLifeSupportTraining != value))
				{
					this.OnLastLifeSupportTrainingChanging(value);
					this.SendPropertyChanging();
					this._LastLifeSupportTraining = value;
					this.SendPropertyChanged("LastLifeSupportTraining");
					this.OnLastLifeSupportTrainingChanged();
				}
			}
		}
		
		[Column(Storage="_LastMilitaryFlightPhysical", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastMilitaryFlightPhysical
		{
			get
			{
				return this._LastMilitaryFlightPhysical;
			}
			set
			{
				if ((this._LastMilitaryFlightPhysical != value))
				{
					this.OnLastMilitaryFlightPhysicalChanging(value);
					this.SendPropertyChanging();
					this._LastMilitaryFlightPhysical = value;
					this.SendPropertyChanged("LastMilitaryFlightPhysical");
					this.OnLastMilitaryFlightPhysicalChanged();
				}
			}
		}
		
		[Column(Storage="_LastSimulatorRefresher", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastSimulatorRefresher
		{
			get
			{
				return this._LastSimulatorRefresher;
			}
			set
			{
				if ((this._LastSimulatorRefresher != value))
				{
					this.OnLastSimulatorRefresherChanging(value);
					this.SendPropertyChanging();
					this._LastSimulatorRefresher = value;
					this.SendPropertyChanged("LastSimulatorRefresher");
					this.OnLastSimulatorRefresherChanged();
				}
			}
		}
		
		[Association(Name="FK_Qualifications_Person", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Qualification = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Qualification = this;
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_QualificationsCertificates_Qualifications", Storage="_QualificationsCertificates", ThisKey="PersonId", OtherKey="PersonId", DeleteRule="NO ACTION")]
		public EntitySet<QualificationsCertificate> QualificationsCertificates
		{
			get
			{
				return this._QualificationsCertificates;
			}
			set
			{
				this._QualificationsCertificates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QualificationsCertificates(QualificationsCertificate entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = this;
		}
		
		private void detach_QualificationsCertificates(QualificationsCertificate entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = null;
		}
	}
	
	[Table(Name="dbo.QualificationsCertificates")]
	public partial class QualificationsCertificate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private System.Guid _CertificateId;
		
		private EntityRef<Certificate> _Certificate;
		
		private EntityRef<Qualification> _Qualification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnCertificateIdChanging(System.Guid value);
    partial void OnCertificateIdChanged();
    #endregion
		
		public QualificationsCertificate()
		{
			this._Certificate = default(EntityRef<Certificate>);
			this._Qualification = default(EntityRef<Qualification>);
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Qualification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_CertificateId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CertificateId
		{
			get
			{
				return this._CertificateId;
			}
			set
			{
				if ((this._CertificateId != value))
				{
					if (this._Certificate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCertificateIdChanging(value);
					this.SendPropertyChanging();
					this._CertificateId = value;
					this.SendPropertyChanged("CertificateId");
					this.OnCertificateIdChanged();
				}
			}
		}
		
		[Association(Name="FK_QualificationsCertificates_Certificates", Storage="_Certificate", ThisKey="CertificateId", OtherKey="Id", IsForeignKey=true)]
		public Certificate Certificate
		{
			get
			{
				return this._Certificate.Entity;
			}
			set
			{
				Certificate previousValue = this._Certificate.Entity;
				if (((previousValue != value) 
							|| (this._Certificate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Certificate.Entity = null;
						previousValue.QualificationsCertificates.Remove(this);
					}
					this._Certificate.Entity = value;
					if ((value != null))
					{
						value.QualificationsCertificates.Add(this);
						this._CertificateId = value.Id;
					}
					else
					{
						this._CertificateId = default(System.Guid);
					}
					this.SendPropertyChanged("Certificate");
				}
			}
		}
		
		[Association(Name="FK_QualificationsCertificates_Qualifications", Storage="_Qualification", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Qualification Qualification
		{
			get
			{
				return this._Qualification.Entity;
			}
			set
			{
				Qualification previousValue = this._Qualification.Entity;
				if (((previousValue != value) 
							|| (this._Qualification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualification.Entity = null;
						previousValue.QualificationsCertificates.Remove(this);
					}
					this._Qualification.Entity = value;
					if ((value != null))
					{
						value.QualificationsCertificates.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Qualification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.schema_info")]
	public partial class Schema_info
	{
		
		private int _Version;
		
		private string _Migration_script;
		
		public Schema_info()
		{
		}
		
		[Column(Name="version", Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Name="migration_script", Storage="_Migration_script", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Migration_script
		{
			get
			{
				return this._Migration_script;
			}
			set
			{
				if ((this._Migration_script != value))
				{
					this._Migration_script = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SquadronLogs")]
	public partial class SquadronLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _DutyCode;
		
		private double _PrimaryHours;
		
		private double _SecondaryHours;
		
		private double _InstructorHours;
		
		private double _EvaluatorHours;
		
		private double _OtherHours;
		
		private int _Sorties;
		
		private double _PrimaryNightHours;
		
		private double _PrimaryInstrumentHours;
		
		private double _SimulatedInstrumentHours;
		
		private System.Guid _FlightLogId;
		
		private System.Guid _PersonId;
		
		private EntityRef<FlightLog> _FlightLog;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDutyCodeChanging(int value);
    partial void OnDutyCodeChanged();
    partial void OnPrimaryHoursChanging(double value);
    partial void OnPrimaryHoursChanged();
    partial void OnSecondaryHoursChanging(double value);
    partial void OnSecondaryHoursChanged();
    partial void OnInstructorHoursChanging(double value);
    partial void OnInstructorHoursChanged();
    partial void OnEvaluatorHoursChanging(double value);
    partial void OnEvaluatorHoursChanged();
    partial void OnOtherHoursChanging(double value);
    partial void OnOtherHoursChanged();
    partial void OnSortiesChanging(int value);
    partial void OnSortiesChanged();
    partial void OnPrimaryNightHoursChanging(double value);
    partial void OnPrimaryNightHoursChanged();
    partial void OnPrimaryInstrumentHoursChanging(double value);
    partial void OnPrimaryInstrumentHoursChanged();
    partial void OnSimulatedInstrumentHoursChanging(double value);
    partial void OnSimulatedInstrumentHoursChanged();
    partial void OnFlightLogIdChanging(System.Guid value);
    partial void OnFlightLogIdChanged();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    #endregion
		
		public SquadronLog()
		{
			this._FlightLog = default(EntityRef<FlightLog>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DutyCode", DbType="Int NOT NULL")]
		public int DutyCode
		{
			get
			{
				return this._DutyCode;
			}
			set
			{
				if ((this._DutyCode != value))
				{
					this.OnDutyCodeChanging(value);
					this.SendPropertyChanging();
					this._DutyCode = value;
					this.SendPropertyChanged("DutyCode");
					this.OnDutyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryHours", DbType="Float NOT NULL")]
		public double PrimaryHours
		{
			get
			{
				return this._PrimaryHours;
			}
			set
			{
				if ((this._PrimaryHours != value))
				{
					this.OnPrimaryHoursChanging(value);
					this.SendPropertyChanging();
					this._PrimaryHours = value;
					this.SendPropertyChanged("PrimaryHours");
					this.OnPrimaryHoursChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryHours", DbType="Float NOT NULL")]
		public double SecondaryHours
		{
			get
			{
				return this._SecondaryHours;
			}
			set
			{
				if ((this._SecondaryHours != value))
				{
					this.OnSecondaryHoursChanging(value);
					this.SendPropertyChanging();
					this._SecondaryHours = value;
					this.SendPropertyChanged("SecondaryHours");
					this.OnSecondaryHoursChanged();
				}
			}
		}
		
		[Column(Storage="_InstructorHours", DbType="Float NOT NULL")]
		public double InstructorHours
		{
			get
			{
				return this._InstructorHours;
			}
			set
			{
				if ((this._InstructorHours != value))
				{
					this.OnInstructorHoursChanging(value);
					this.SendPropertyChanging();
					this._InstructorHours = value;
					this.SendPropertyChanged("InstructorHours");
					this.OnInstructorHoursChanged();
				}
			}
		}
		
		[Column(Storage="_EvaluatorHours", DbType="Float NOT NULL")]
		public double EvaluatorHours
		{
			get
			{
				return this._EvaluatorHours;
			}
			set
			{
				if ((this._EvaluatorHours != value))
				{
					this.OnEvaluatorHoursChanging(value);
					this.SendPropertyChanging();
					this._EvaluatorHours = value;
					this.SendPropertyChanged("EvaluatorHours");
					this.OnEvaluatorHoursChanged();
				}
			}
		}
		
		[Column(Storage="_OtherHours", DbType="Float NOT NULL")]
		public double OtherHours
		{
			get
			{
				return this._OtherHours;
			}
			set
			{
				if ((this._OtherHours != value))
				{
					this.OnOtherHoursChanging(value);
					this.SendPropertyChanging();
					this._OtherHours = value;
					this.SendPropertyChanged("OtherHours");
					this.OnOtherHoursChanged();
				}
			}
		}
		
		[Column(Storage="_Sorties", DbType="Int NOT NULL")]
		public int Sorties
		{
			get
			{
				return this._Sorties;
			}
			set
			{
				if ((this._Sorties != value))
				{
					this.OnSortiesChanging(value);
					this.SendPropertyChanging();
					this._Sorties = value;
					this.SendPropertyChanged("Sorties");
					this.OnSortiesChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryNightHours", DbType="Float NOT NULL")]
		public double PrimaryNightHours
		{
			get
			{
				return this._PrimaryNightHours;
			}
			set
			{
				if ((this._PrimaryNightHours != value))
				{
					this.OnPrimaryNightHoursChanging(value);
					this.SendPropertyChanging();
					this._PrimaryNightHours = value;
					this.SendPropertyChanged("PrimaryNightHours");
					this.OnPrimaryNightHoursChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryInstrumentHours", DbType="Float NOT NULL")]
		public double PrimaryInstrumentHours
		{
			get
			{
				return this._PrimaryInstrumentHours;
			}
			set
			{
				if ((this._PrimaryInstrumentHours != value))
				{
					this.OnPrimaryInstrumentHoursChanging(value);
					this.SendPropertyChanging();
					this._PrimaryInstrumentHours = value;
					this.SendPropertyChanged("PrimaryInstrumentHours");
					this.OnPrimaryInstrumentHoursChanged();
				}
			}
		}
		
		[Column(Storage="_SimulatedInstrumentHours", DbType="Float NOT NULL")]
		public double SimulatedInstrumentHours
		{
			get
			{
				return this._SimulatedInstrumentHours;
			}
			set
			{
				if ((this._SimulatedInstrumentHours != value))
				{
					this.OnSimulatedInstrumentHoursChanging(value);
					this.SendPropertyChanging();
					this._SimulatedInstrumentHours = value;
					this.SendPropertyChanged("SimulatedInstrumentHours");
					this.OnSimulatedInstrumentHoursChanged();
				}
			}
		}
		
		[Column(Storage="_FlightLogId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FlightLogId
		{
			get
			{
				return this._FlightLogId;
			}
			set
			{
				if ((this._FlightLogId != value))
				{
					if (this._FlightLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlightLogIdChanging(value);
					this.SendPropertyChanging();
					this._FlightLogId = value;
					this.SendPropertyChanged("FlightLogId");
					this.OnFlightLogIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Association(Name="FK_SquadronLogs_FlightLogs", Storage="_FlightLog", ThisKey="FlightLogId", OtherKey="Id", IsForeignKey=true)]
		public FlightLog FlightLog
		{
			get
			{
				return this._FlightLog.Entity;
			}
			set
			{
				FlightLog previousValue = this._FlightLog.Entity;
				if (((previousValue != value) 
							|| (this._FlightLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightLog.Entity = null;
						previousValue.SquadronLogs.Remove(this);
					}
					this._FlightLog.Entity = value;
					if ((value != null))
					{
						value.SquadronLogs.Add(this);
						this._FlightLogId = value.Id;
					}
					else
					{
						this._FlightLogId = default(System.Guid);
					}
					this.SendPropertyChanged("FlightLog");
				}
			}
		}
		
		[Association(Name="FK_SquadronLogs_Persons", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.SquadronLogs.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.SquadronLogs.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StaticImages")]
	public partial class StaticImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _MimeType;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public StaticImage()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_MimeType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _DisplayName;
		
		private string _Email;
		
		private string _Username;
		
		private bool _Disabled;
		
		private bool _UserManagerRole;
		
		private bool _PersonnelManagerRole;
		
		private bool _ProgramManagerRole;
		
		private bool _FlightLogManagerRole;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<MessagesForUser> _MessagesForUsers;
		
		private EntityRef<Person> _Person;
		
		private EntitySet<Message> _UserAlert_Messages_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisabledChanging(bool value);
    partial void OnDisabledChanged();
    partial void OnUserManagerRoleChanging(bool value);
    partial void OnUserManagerRoleChanged();
    partial void OnPersonnelManagerRoleChanging(bool value);
    partial void OnPersonnelManagerRoleChanged();
    partial void OnProgramManagerRoleChanging(bool value);
    partial void OnProgramManagerRoleChanged();
    partial void OnFlightLogManagerRoleChanging(bool value);
    partial void OnFlightLogManagerRoleChanged();
    #endregion
		
		public User()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MessagesForUsers = new EntitySet<MessagesForUser>(new Action<MessagesForUser>(this.attach_MessagesForUsers), new Action<MessagesForUser>(this.detach_MessagesForUsers));
			this._Person = default(EntityRef<Person>);
			this._UserAlert_Messages_Users = new EntitySet<Message>(new Action<Message>(this.attach_UserAlert_Messages_Users), new Action<Message>(this.detach_UserAlert_Messages_Users));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(254) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Disabled", DbType="Bit NOT NULL")]
		public bool Disabled
		{
			get
			{
				return this._Disabled;
			}
			set
			{
				if ((this._Disabled != value))
				{
					this.OnDisabledChanging(value);
					this.SendPropertyChanging();
					this._Disabled = value;
					this.SendPropertyChanged("Disabled");
					this.OnDisabledChanged();
				}
			}
		}
		
		[Column(Storage="_UserManagerRole", DbType="Bit NOT NULL")]
		public bool UserManagerRole
		{
			get
			{
				return this._UserManagerRole;
			}
			set
			{
				if ((this._UserManagerRole != value))
				{
					this.OnUserManagerRoleChanging(value);
					this.SendPropertyChanging();
					this._UserManagerRole = value;
					this.SendPropertyChanged("UserManagerRole");
					this.OnUserManagerRoleChanged();
				}
			}
		}
		
		[Column(Storage="_PersonnelManagerRole", DbType="Bit NOT NULL")]
		public bool PersonnelManagerRole
		{
			get
			{
				return this._PersonnelManagerRole;
			}
			set
			{
				if ((this._PersonnelManagerRole != value))
				{
					this.OnPersonnelManagerRoleChanging(value);
					this.SendPropertyChanging();
					this._PersonnelManagerRole = value;
					this.SendPropertyChanged("PersonnelManagerRole");
					this.OnPersonnelManagerRoleChanged();
				}
			}
		}
		
		[Column(Storage="_ProgramManagerRole", DbType="Bit NOT NULL")]
		public bool ProgramManagerRole
		{
			get
			{
				return this._ProgramManagerRole;
			}
			set
			{
				if ((this._ProgramManagerRole != value))
				{
					this.OnProgramManagerRoleChanging(value);
					this.SendPropertyChanging();
					this._ProgramManagerRole = value;
					this.SendPropertyChanged("ProgramManagerRole");
					this.OnProgramManagerRoleChanged();
				}
			}
		}
		
		[Column(Storage="_FlightLogManagerRole", DbType="Bit NOT NULL")]
		public bool FlightLogManagerRole
		{
			get
			{
				return this._FlightLogManagerRole;
			}
			set
			{
				if ((this._FlightLogManagerRole != value))
				{
					this.OnFlightLogManagerRoleChanging(value);
					this.SendPropertyChanging();
					this._FlightLogManagerRole = value;
					this.SendPropertyChanged("FlightLogManagerRole");
					this.OnFlightLogManagerRoleChanged();
				}
			}
		}
		
		[Association(Name="FK_Announcement_Messages_Users", Storage="_Messages", ThisKey="Id", OtherKey="Announcement_CreatedBy", DeleteRule="NO ACTION")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[Association(Name="FK_MessagesForUsers_Users", Storage="_MessagesForUsers", ThisKey="Id", OtherKey="UserId", DeleteRule="NO ACTION")]
		public EntitySet<MessagesForUser> MessagesForUsers
		{
			get
			{
				return this._MessagesForUsers;
			}
			set
			{
				this._MessagesForUsers.Assign(value);
			}
		}
		
		[Association(Name="FK_Persons_Users", Storage="_Person", ThisKey="Id", OtherKey="PersonId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.User = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_UserAlert_Messages_Users", Storage="_UserAlert_Messages_Users", ThisKey="Id", OtherKey="UserAlert_UserId", DeleteRule="NO ACTION")]
		public EntitySet<Message> UserAlert_Messages_Users
		{
			get
			{
				return this._UserAlert_Messages_Users;
			}
			set
			{
				this._UserAlert_Messages_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MessagesForUsers(MessagesForUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MessagesForUsers(MessagesForUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserAlert_Messages_Users(Message entity)
		{
			this.SendPropertyChanging();
			entity.UserAlert_User = this;
		}
		
		private void detach_UserAlert_Messages_Users(Message entity)
		{
			this.SendPropertyChanging();
			entity.UserAlert_User = null;
		}
	}
}
#pragma warning restore 1591
