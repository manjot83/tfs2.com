#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonnelRecordsMigrator.Old
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="old_tfs2.com_opcenter")]
	public partial class OldDatabase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticlecategory(Articlecategory instance);
    partial void UpdateArticlecategory(Articlecategory instance);
    partial void DeleteArticlecategory(Articlecategory instance);
    partial void InsertAvailability(Availability instance);
    partial void UpdateAvailability(Availability instance);
    partial void DeleteAvailability(Availability instance);
    partial void InsertDbversion(Dbversion instance);
    partial void UpdateDbversion(Dbversion instance);
    partial void DeleteDbversion(Dbversion instance);
    partial void InsertExternallink(Externallink instance);
    partial void UpdateExternallink(Externallink instance);
    partial void DeleteExternallink(Externallink instance);
    partial void InsertFormcode(Formcode instance);
    partial void UpdateFormcode(Formcode instance);
    partial void DeleteFormcode(Formcode instance);
    partial void InsertFormfield(Formfield instance);
    partial void UpdateFormfield(Formfield instance);
    partial void DeleteFormfield(Formfield instance);
    partial void InsertFormfile(Formfile instance);
    partial void UpdateFormfile(Formfile instance);
    partial void DeleteFormfile(Formfile instance);
    partial void InsertFormrecord(Formrecord instance);
    partial void UpdateFormrecord(Formrecord instance);
    partial void DeleteFormrecord(Formrecord instance);
    partial void InsertForm(Form instance);
    partial void UpdateForm(Form instance);
    partial void DeleteForm(Form instance);
    partial void InsertHelparticle(Helparticle instance);
    partial void UpdateHelparticle(Helparticle instance);
    partial void DeleteHelparticle(Helparticle instance);
    partial void InsertNewspost(Newspost instance);
    partial void UpdateNewspost(Newspost instance);
    partial void DeleteNewspost(Newspost instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    #endregion
		
		public OldDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OldDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OldDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OldDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Articlecategory> Articlecategories
		{
			get
			{
				return this.GetTable<Articlecategory>();
			}
		}
		
		public System.Data.Linq.Table<Availability> Availabilities
		{
			get
			{
				return this.GetTable<Availability>();
			}
		}
		
		public System.Data.Linq.Table<Dbversion> Dbversions
		{
			get
			{
				return this.GetTable<Dbversion>();
			}
		}
		
		public System.Data.Linq.Table<Externallink> Externallinks
		{
			get
			{
				return this.GetTable<Externallink>();
			}
		}
		
		public System.Data.Linq.Table<Formcode> Formcodes
		{
			get
			{
				return this.GetTable<Formcode>();
			}
		}
		
		public System.Data.Linq.Table<Formfield> Formfields
		{
			get
			{
				return this.GetTable<Formfield>();
			}
		}
		
		public System.Data.Linq.Table<Formfile> Formfiles
		{
			get
			{
				return this.GetTable<Formfile>();
			}
		}
		
		public System.Data.Linq.Table<Formrecord> Formrecords
		{
			get
			{
				return this.GetTable<Formrecord>();
			}
		}
		
		public System.Data.Linq.Table<Form> Forms
		{
			get
			{
				return this.GetTable<Form>();
			}
		}
		
		public System.Data.Linq.Table<Helparticle> Helparticles
		{
			get
			{
				return this.GetTable<Helparticle>();
			}
		}
		
		public System.Data.Linq.Table<Newspost> Newsposts
		{
			get
			{
				return this.GetTable<Newspost>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
	}
	
	[Table(Name="dbo.articlecategories")]
	public partial class Articlecategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntitySet<Newspost> _Newsposts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Articlecategory()
		{
			this._Newsposts = new EntitySet<Newspost>(new Action<Newspost>(this.attach_Newsposts), new Action<Newspost>(this.detach_Newsposts));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="description", Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_newsposts_articlecategories", Storage="_Newsposts", ThisKey="Id", OtherKey="Categoryid", DeleteRule="NO ACTION")]
		public EntitySet<Newspost> Newsposts
		{
			get
			{
				return this._Newsposts;
			}
			set
			{
				this._Newsposts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Newsposts(Newspost entity)
		{
			this.SendPropertyChanging();
			entity.Articlecategory = this;
		}
		
		private void detach_Newsposts(Newspost entity)
		{
			this.SendPropertyChanging();
			entity.Articlecategory = null;
		}
	}
	
	[Table(Name="dbo.availability")]
	public partial class Availability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Personid;
		
		private int _Month;
		
		private int _Year;
		
		private int _Day;
		
		private bool _Isavailable;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonidChanging(int value);
    partial void OnPersonidChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDayChanging(int value);
    partial void OnDayChanged();
    partial void OnIsavailableChanging(bool value);
    partial void OnIsavailableChanged();
    #endregion
		
		public Availability()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="personid", Storage="_Personid", DbType="Int NOT NULL")]
		public int Personid
		{
			get
			{
				return this._Personid;
			}
			set
			{
				if ((this._Personid != value))
				{
					this.OnPersonidChanging(value);
					this.SendPropertyChanging();
					this._Personid = value;
					this.SendPropertyChanged("Personid");
					this.OnPersonidChanged();
				}
			}
		}
		
		[Column(Name="month", Storage="_Month", DbType="Int NOT NULL")]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[Column(Name="year", Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Name="day", Storage="_Day", DbType="Int NOT NULL")]
		public int Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Name="isavailable", Storage="_Isavailable", DbType="Bit NOT NULL")]
		public bool Isavailable
		{
			get
			{
				return this._Isavailable;
			}
			set
			{
				if ((this._Isavailable != value))
				{
					this.OnIsavailableChanging(value);
					this.SendPropertyChanging();
					this._Isavailable = value;
					this.SendPropertyChanged("Isavailable");
					this.OnIsavailableChanged();
				}
			}
		}
		
		[Association(Name="FK_availability_persons", Storage="_Person", ThisKey="Personid", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Availabilities.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Availabilities.Add(this);
						this._Personid = value.Id;
					}
					else
					{
						this._Personid = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.dbversion")]
	public partial class Dbversion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Createdon;
		
		private System.Nullable<System.DateTime> _Appliedon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedonChanging(System.DateTime value);
    partial void OnCreatedonChanged();
    partial void OnAppliedonChanging(System.Nullable<System.DateTime> value);
    partial void OnAppliedonChanged();
    #endregion
		
		public Dbversion()
		{
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime NOT NULL")]
		public System.DateTime Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="appliedon", Storage="_Appliedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Appliedon
		{
			get
			{
				return this._Appliedon;
			}
			set
			{
				if ((this._Appliedon != value))
				{
					this.OnAppliedonChanging(value);
					this.SendPropertyChanging();
					this._Appliedon = value;
					this.SendPropertyChanged("Appliedon");
					this.OnAppliedonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.externallinks")]
	public partial class Externallink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Navurl;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNavurlChanging(string value);
    partial void OnNavurlChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Externallink()
		{
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="navurl", Storage="_Navurl", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Navurl
		{
			get
			{
				return this._Navurl;
			}
			set
			{
				if ((this._Navurl != value))
				{
					this.OnNavurlChanging(value);
					this.SendPropertyChanging();
					this._Navurl = value;
					this.SendPropertyChanged("Navurl");
					this.OnNavurlChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.formcodes")]
	public partial class Formcode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Fieldid;
		
		private string _Label;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntityRef<Formfield> _Formfield;
		
		private EntitySet<Formrecord> _Formrecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldidChanging(int value);
    partial void OnFieldidChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Formcode()
		{
			this._Formfield = default(EntityRef<Formfield>);
			this._Formrecords = new EntitySet<Formrecord>(new Action<Formrecord>(this.attach_Formrecords), new Action<Formrecord>(this.detach_Formrecords));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="fieldid", Storage="_Fieldid", DbType="Int NOT NULL")]
		public int Fieldid
		{
			get
			{
				return this._Fieldid;
			}
			set
			{
				if ((this._Fieldid != value))
				{
					this.OnFieldidChanging(value);
					this.SendPropertyChanging();
					this._Fieldid = value;
					this.SendPropertyChanged("Fieldid");
					this.OnFieldidChanged();
				}
			}
		}
		
		[Column(Name="label", Storage="_Label", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_formcodes_formfields", Storage="_Formfield", ThisKey="Fieldid", OtherKey="Id", IsForeignKey=true)]
		public Formfield Formfield
		{
			get
			{
				return this._Formfield.Entity;
			}
			set
			{
				Formfield previousValue = this._Formfield.Entity;
				if (((previousValue != value) 
							|| (this._Formfield.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formfield.Entity = null;
						previousValue.Formcodes.Remove(this);
					}
					this._Formfield.Entity = value;
					if ((value != null))
					{
						value.Formcodes.Add(this);
						this._Fieldid = value.Id;
					}
					else
					{
						this._Fieldid = default(int);
					}
					this.SendPropertyChanged("Formfield");
				}
			}
		}
		
		[Association(Name="FK_formrecords_formcodes", Storage="_Formrecords", ThisKey="Id", OtherKey="Codeid", DeleteRule="NO ACTION")]
		public EntitySet<Formrecord> Formrecords
		{
			get
			{
				return this._Formrecords;
			}
			set
			{
				this._Formrecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Formrecords(Formrecord entity)
		{
			this.SendPropertyChanging();
			entity.Formcode = this;
		}
		
		private void detach_Formrecords(Formrecord entity)
		{
			this.SendPropertyChanging();
			entity.Formcode = null;
		}
	}
	
	[Table(Name="dbo.formfields")]
	public partial class Formfield : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Formid;
		
		private string _Name;
		
		private string _Metadata;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntitySet<Formcode> _Formcodes;
		
		private EntityRef<Form> _Form;
		
		private EntitySet<Formrecord> _Formrecords;
		
		private EntitySet<Form> _Forms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFormidChanging(int value);
    partial void OnFormidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMetadataChanging(string value);
    partial void OnMetadataChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Formfield()
		{
			this._Formcodes = new EntitySet<Formcode>(new Action<Formcode>(this.attach_Formcodes), new Action<Formcode>(this.detach_Formcodes));
			this._Form = default(EntityRef<Form>);
			this._Formrecords = new EntitySet<Formrecord>(new Action<Formrecord>(this.attach_Formrecords), new Action<Formrecord>(this.detach_Formrecords));
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="formid", Storage="_Formid", DbType="Int NOT NULL")]
		public int Formid
		{
			get
			{
				return this._Formid;
			}
			set
			{
				if ((this._Formid != value))
				{
					this.OnFormidChanging(value);
					this.SendPropertyChanging();
					this._Formid = value;
					this.SendPropertyChanged("Formid");
					this.OnFormidChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="metadata", Storage="_Metadata", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Metadata
		{
			get
			{
				return this._Metadata;
			}
			set
			{
				if ((this._Metadata != value))
				{
					this.OnMetadataChanging(value);
					this.SendPropertyChanging();
					this._Metadata = value;
					this.SendPropertyChanged("Metadata");
					this.OnMetadataChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_formcodes_formfields", Storage="_Formcodes", ThisKey="Id", OtherKey="Fieldid", DeleteRule="NO ACTION")]
		public EntitySet<Formcode> Formcodes
		{
			get
			{
				return this._Formcodes;
			}
			set
			{
				this._Formcodes.Assign(value);
			}
		}
		
		[Association(Name="FK_formfields_forms", Storage="_Form", ThisKey="Formid", OtherKey="Id", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.Formfields.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.Formfields.Add(this);
						this._Formid = value.Id;
					}
					else
					{
						this._Formid = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[Association(Name="FK_formrecords_formfields", Storage="_Formrecords", ThisKey="Id", OtherKey="Fieldid", DeleteRule="NO ACTION")]
		public EntitySet<Formrecord> Formrecords
		{
			get
			{
				return this._Formrecords;
			}
			set
			{
				this._Formrecords.Assign(value);
			}
		}
		
		[Association(Name="FK_forms_formfields", Storage="_Forms", ThisKey="Id", OtherKey="Keyfieldid", DeleteRule="NO ACTION")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Formcodes(Formcode entity)
		{
			this.SendPropertyChanging();
			entity.Formfield = this;
		}
		
		private void detach_Formcodes(Formcode entity)
		{
			this.SendPropertyChanging();
			entity.Formfield = null;
		}
		
		private void attach_Formrecords(Formrecord entity)
		{
			this.SendPropertyChanging();
			entity.Formfield = this;
		}
		
		private void detach_Formrecords(Formrecord entity)
		{
			this.SendPropertyChanging();
			entity.Formfield = null;
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Formfield = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Formfield = null;
		}
	}
	
	[Table(Name="dbo.formfiles")]
	public partial class Formfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Formid;
		
		private System.Nullable<int> _Personid;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntityRef<Form> _Form;
		
		private EntitySet<Formrecord> _Formrecords;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFormidChanging(int value);
    partial void OnFormidChanged();
    partial void OnPersonidChanging(System.Nullable<int> value);
    partial void OnPersonidChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Formfile()
		{
			this._Form = default(EntityRef<Form>);
			this._Formrecords = new EntitySet<Formrecord>(new Action<Formrecord>(this.attach_Formrecords), new Action<Formrecord>(this.detach_Formrecords));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="formid", Storage="_Formid", DbType="Int NOT NULL")]
		public int Formid
		{
			get
			{
				return this._Formid;
			}
			set
			{
				if ((this._Formid != value))
				{
					this.OnFormidChanging(value);
					this.SendPropertyChanging();
					this._Formid = value;
					this.SendPropertyChanged("Formid");
					this.OnFormidChanged();
				}
			}
		}
		
		[Column(Name="personid", Storage="_Personid", DbType="Int")]
		public System.Nullable<int> Personid
		{
			get
			{
				return this._Personid;
			}
			set
			{
				if ((this._Personid != value))
				{
					this.OnPersonidChanging(value);
					this.SendPropertyChanging();
					this._Personid = value;
					this.SendPropertyChanged("Personid");
					this.OnPersonidChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_formfiles_forms", Storage="_Form", ThisKey="Formid", OtherKey="Id", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.Formfiles.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.Formfiles.Add(this);
						this._Formid = value.Id;
					}
					else
					{
						this._Formid = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[Association(Name="FK_formfiles_personnelfiles", Storage="_Formrecords", ThisKey="Id", OtherKey="Fileid", DeleteRule="NO ACTION")]
		public EntitySet<Formrecord> Formrecords
		{
			get
			{
				return this._Formrecords;
			}
			set
			{
				this._Formrecords.Assign(value);
			}
		}
		
		[Association(Name="FK_formfiles_persons", Storage="_Person", ThisKey="Personid", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Formfiles.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Formfiles.Add(this);
						this._Personid = value.Id;
					}
					else
					{
						this._Personid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Formrecords(Formrecord entity)
		{
			this.SendPropertyChanging();
			entity.Formfile = this;
		}
		
		private void detach_Formrecords(Formrecord entity)
		{
			this.SendPropertyChanging();
			entity.Formfile = null;
		}
	}
	
	[Table(Name="dbo.formrecords")]
	public partial class Formrecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Fileid;
		
		private int _Fieldid;
		
		private System.Nullable<int> _Codeid;
		
		private string _Storedvalue;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntityRef<Formfile> _Formfile;
		
		private EntityRef<Formcode> _Formcode;
		
		private EntityRef<Formfield> _Formfield;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileidChanging(int value);
    partial void OnFileidChanged();
    partial void OnFieldidChanging(int value);
    partial void OnFieldidChanged();
    partial void OnCodeidChanging(System.Nullable<int> value);
    partial void OnCodeidChanged();
    partial void OnStoredvalueChanging(string value);
    partial void OnStoredvalueChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Formrecord()
		{
			this._Formfile = default(EntityRef<Formfile>);
			this._Formcode = default(EntityRef<Formcode>);
			this._Formfield = default(EntityRef<Formfield>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="fileid", Storage="_Fileid", DbType="Int NOT NULL")]
		public int Fileid
		{
			get
			{
				return this._Fileid;
			}
			set
			{
				if ((this._Fileid != value))
				{
					this.OnFileidChanging(value);
					this.SendPropertyChanging();
					this._Fileid = value;
					this.SendPropertyChanged("Fileid");
					this.OnFileidChanged();
				}
			}
		}
		
		[Column(Name="fieldid", Storage="_Fieldid", DbType="Int NOT NULL")]
		public int Fieldid
		{
			get
			{
				return this._Fieldid;
			}
			set
			{
				if ((this._Fieldid != value))
				{
					this.OnFieldidChanging(value);
					this.SendPropertyChanging();
					this._Fieldid = value;
					this.SendPropertyChanged("Fieldid");
					this.OnFieldidChanged();
				}
			}
		}
		
		[Column(Name="codeid", Storage="_Codeid", DbType="Int")]
		public System.Nullable<int> Codeid
		{
			get
			{
				return this._Codeid;
			}
			set
			{
				if ((this._Codeid != value))
				{
					this.OnCodeidChanging(value);
					this.SendPropertyChanging();
					this._Codeid = value;
					this.SendPropertyChanged("Codeid");
					this.OnCodeidChanged();
				}
			}
		}
		
		[Column(Name="storedvalue", Storage="_Storedvalue", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Storedvalue
		{
			get
			{
				return this._Storedvalue;
			}
			set
			{
				if ((this._Storedvalue != value))
				{
					this.OnStoredvalueChanging(value);
					this.SendPropertyChanging();
					this._Storedvalue = value;
					this.SendPropertyChanged("Storedvalue");
					this.OnStoredvalueChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_formfiles_personnelfiles", Storage="_Formfile", ThisKey="Fileid", OtherKey="Id", IsForeignKey=true)]
		public Formfile Formfile
		{
			get
			{
				return this._Formfile.Entity;
			}
			set
			{
				Formfile previousValue = this._Formfile.Entity;
				if (((previousValue != value) 
							|| (this._Formfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formfile.Entity = null;
						previousValue.Formrecords.Remove(this);
					}
					this._Formfile.Entity = value;
					if ((value != null))
					{
						value.Formrecords.Add(this);
						this._Fileid = value.Id;
					}
					else
					{
						this._Fileid = default(int);
					}
					this.SendPropertyChanged("Formfile");
				}
			}
		}
		
		[Association(Name="FK_formrecords_formcodes", Storage="_Formcode", ThisKey="Codeid", OtherKey="Id", IsForeignKey=true)]
		public Formcode Formcode
		{
			get
			{
				return this._Formcode.Entity;
			}
			set
			{
				Formcode previousValue = this._Formcode.Entity;
				if (((previousValue != value) 
							|| (this._Formcode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formcode.Entity = null;
						previousValue.Formrecords.Remove(this);
					}
					this._Formcode.Entity = value;
					if ((value != null))
					{
						value.Formrecords.Add(this);
						this._Codeid = value.Id;
					}
					else
					{
						this._Codeid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Formcode");
				}
			}
		}
		
		[Association(Name="FK_formrecords_formfields", Storage="_Formfield", ThisKey="Fieldid", OtherKey="Id", IsForeignKey=true)]
		public Formfield Formfield
		{
			get
			{
				return this._Formfield.Entity;
			}
			set
			{
				Formfield previousValue = this._Formfield.Entity;
				if (((previousValue != value) 
							|| (this._Formfield.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formfield.Entity = null;
						previousValue.Formrecords.Remove(this);
					}
					this._Formfield.Entity = value;
					if ((value != null))
					{
						value.Formrecords.Add(this);
						this._Fieldid = value.Id;
					}
					else
					{
						this._Fieldid = default(int);
					}
					this.SendPropertyChanged("Formfield");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.forms")]
	public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Shortname;
		
		private string _Tfsfnumber;
		
		private string _Remarks;
		
		private System.Nullable<int> _Keyfieldid;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntitySet<Formfield> _Formfields;
		
		private EntitySet<Formfile> _Formfiles;
		
		private EntityRef<Formfield> _Formfield;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortnameChanging(string value);
    partial void OnShortnameChanged();
    partial void OnTfsfnumberChanging(string value);
    partial void OnTfsfnumberChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnKeyfieldidChanging(System.Nullable<int> value);
    partial void OnKeyfieldidChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Form()
		{
			this._Formfields = new EntitySet<Formfield>(new Action<Formfield>(this.attach_Formfields), new Action<Formfield>(this.detach_Formfields));
			this._Formfiles = new EntitySet<Formfile>(new Action<Formfile>(this.attach_Formfiles), new Action<Formfile>(this.detach_Formfiles));
			this._Formfield = default(EntityRef<Formfield>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="shortname", Storage="_Shortname", DbType="VarChar(50)")]
		public string Shortname
		{
			get
			{
				return this._Shortname;
			}
			set
			{
				if ((this._Shortname != value))
				{
					this.OnShortnameChanging(value);
					this.SendPropertyChanging();
					this._Shortname = value;
					this.SendPropertyChanged("Shortname");
					this.OnShortnameChanged();
				}
			}
		}
		
		[Column(Name="tfsfnumber", Storage="_Tfsfnumber", DbType="VarChar(50)")]
		public string Tfsfnumber
		{
			get
			{
				return this._Tfsfnumber;
			}
			set
			{
				if ((this._Tfsfnumber != value))
				{
					this.OnTfsfnumberChanging(value);
					this.SendPropertyChanging();
					this._Tfsfnumber = value;
					this.SendPropertyChanged("Tfsfnumber");
					this.OnTfsfnumberChanged();
				}
			}
		}
		
		[Column(Name="remarks", Storage="_Remarks", DbType="VarChar(255)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[Column(Name="keyfieldid", Storage="_Keyfieldid", DbType="Int")]
		public System.Nullable<int> Keyfieldid
		{
			get
			{
				return this._Keyfieldid;
			}
			set
			{
				if ((this._Keyfieldid != value))
				{
					this.OnKeyfieldidChanging(value);
					this.SendPropertyChanging();
					this._Keyfieldid = value;
					this.SendPropertyChanged("Keyfieldid");
					this.OnKeyfieldidChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_formfields_forms", Storage="_Formfields", ThisKey="Id", OtherKey="Formid", DeleteRule="NO ACTION")]
		public EntitySet<Formfield> Formfields
		{
			get
			{
				return this._Formfields;
			}
			set
			{
				this._Formfields.Assign(value);
			}
		}
		
		[Association(Name="FK_formfiles_forms", Storage="_Formfiles", ThisKey="Id", OtherKey="Formid", DeleteRule="NO ACTION")]
		public EntitySet<Formfile> Formfiles
		{
			get
			{
				return this._Formfiles;
			}
			set
			{
				this._Formfiles.Assign(value);
			}
		}
		
		[Association(Name="FK_forms_formfields", Storage="_Formfield", ThisKey="Keyfieldid", OtherKey="Id", IsForeignKey=true)]
		public Formfield Formfield
		{
			get
			{
				return this._Formfield.Entity;
			}
			set
			{
				Formfield previousValue = this._Formfield.Entity;
				if (((previousValue != value) 
							|| (this._Formfield.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formfield.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._Formfield.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._Keyfieldid = value.Id;
					}
					else
					{
						this._Keyfieldid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Formfield");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Formfields(Formfield entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_Formfields(Formfield entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
		
		private void attach_Formfiles(Formfile entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_Formfiles(Formfile entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
	}
	
	[Table(Name="dbo.helparticles")]
	public partial class Helparticle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Subject;
		
		private string _Content;
		
		private System.Nullable<bool> _Deleted;
		
		private System.DateTime _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.DateTime value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Helparticle()
		{
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="subject", Storage="_Subject", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Name="content", Storage="_Content", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime NOT NULL")]
		public System.DateTime Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.newsposts")]
	public partial class Newspost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Personid;
		
		private int _Categoryid;
		
		private string _Subject;
		
		private string _Content;
		
		private bool _Isurgent;
		
		private System.Nullable<bool> _Deleted;
		
		private System.DateTime _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntityRef<Articlecategory> _Articlecategory;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonidChanging(int value);
    partial void OnPersonidChanged();
    partial void OnCategoryidChanging(int value);
    partial void OnCategoryidChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsurgentChanging(bool value);
    partial void OnIsurgentChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.DateTime value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Newspost()
		{
			this._Articlecategory = default(EntityRef<Articlecategory>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="personid", Storage="_Personid", DbType="Int NOT NULL")]
		public int Personid
		{
			get
			{
				return this._Personid;
			}
			set
			{
				if ((this._Personid != value))
				{
					this.OnPersonidChanging(value);
					this.SendPropertyChanging();
					this._Personid = value;
					this.SendPropertyChanged("Personid");
					this.OnPersonidChanged();
				}
			}
		}
		
		[Column(Name="categoryid", Storage="_Categoryid", DbType="Int NOT NULL")]
		public int Categoryid
		{
			get
			{
				return this._Categoryid;
			}
			set
			{
				if ((this._Categoryid != value))
				{
					this.OnCategoryidChanging(value);
					this.SendPropertyChanging();
					this._Categoryid = value;
					this.SendPropertyChanged("Categoryid");
					this.OnCategoryidChanged();
				}
			}
		}
		
		[Column(Name="subject", Storage="_Subject", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Name="content", Storage="_Content", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Name="isurgent", Storage="_Isurgent", DbType="Bit NOT NULL")]
		public bool Isurgent
		{
			get
			{
				return this._Isurgent;
			}
			set
			{
				if ((this._Isurgent != value))
				{
					this.OnIsurgentChanging(value);
					this.SendPropertyChanging();
					this._Isurgent = value;
					this.SendPropertyChanged("Isurgent");
					this.OnIsurgentChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime NOT NULL")]
		public System.DateTime Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_newsposts_articlecategories", Storage="_Articlecategory", ThisKey="Categoryid", OtherKey="Id", IsForeignKey=true)]
		public Articlecategory Articlecategory
		{
			get
			{
				return this._Articlecategory.Entity;
			}
			set
			{
				Articlecategory previousValue = this._Articlecategory.Entity;
				if (((previousValue != value) 
							|| (this._Articlecategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Articlecategory.Entity = null;
						previousValue.Newsposts.Remove(this);
					}
					this._Articlecategory.Entity = value;
					if ((value != null))
					{
						value.Newsposts.Add(this);
						this._Categoryid = value.Id;
					}
					else
					{
						this._Categoryid = default(int);
					}
					this.SendPropertyChanged("Articlecategory");
				}
			}
		}
		
		[Association(Name="FK_newsposts_persons", Storage="_Person", ThisKey="Personid", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Newsposts.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Newsposts.Add(this);
						this._Personid = value.Id;
					}
					else
					{
						this._Personid = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.persons")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Email;
		
		private string _Username;
		
		private string _Displayname;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
		private string _Createdby;
		
		private string _Modifiedby;
		
		private EntitySet<Availability> _Availabilities;
		
		private EntitySet<Formfile> _Formfiles;
		
		private EntitySet<Newspost> _Newsposts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplaynameChanging(string value);
    partial void OnDisplaynameChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    partial void OnCreatedbyChanging(string value);
    partial void OnCreatedbyChanged();
    partial void OnModifiedbyChanging(string value);
    partial void OnModifiedbyChanged();
    #endregion
		
		public Person()
		{
			this._Availabilities = new EntitySet<Availability>(new Action<Availability>(this.attach_Availabilities), new Action<Availability>(this.detach_Availabilities));
			this._Formfiles = new EntitySet<Formfile>(new Action<Formfile>(this.attach_Formfiles), new Action<Formfile>(this.detach_Formfiles));
			this._Newsposts = new EntitySet<Newspost>(new Action<Newspost>(this.attach_Newsposts), new Action<Newspost>(this.detach_Newsposts));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="firstname", Storage="_Firstname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[Column(Name="lastname", Storage="_Lastname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="username", Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Name="displayname", Storage="_Displayname", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Displayname
		{
			get
			{
				return this._Displayname;
			}
			set
			{
				if ((this._Displayname != value))
				{
					this.OnDisplaynameChanging(value);
					this.SendPropertyChanging();
					this._Displayname = value;
					this.SendPropertyChanged("Displayname");
					this.OnDisplaynameChanged();
				}
			}
		}
		
		[Column(Name="deleted", Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="createdon", Storage="_Createdon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[Column(Name="modifiedon", Storage="_Modifiedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		[Column(Name="createdby", Storage="_Createdby", DbType="VarChar(50)")]
		public string Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[Column(Name="modifiedby", Storage="_Modifiedby", DbType="VarChar(50)")]
		public string Modifiedby
		{
			get
			{
				return this._Modifiedby;
			}
			set
			{
				if ((this._Modifiedby != value))
				{
					this.OnModifiedbyChanging(value);
					this.SendPropertyChanging();
					this._Modifiedby = value;
					this.SendPropertyChanged("Modifiedby");
					this.OnModifiedbyChanged();
				}
			}
		}
		
		[Association(Name="FK_availability_persons", Storage="_Availabilities", ThisKey="Id", OtherKey="Personid", DeleteRule="NO ACTION")]
		public EntitySet<Availability> Availabilities
		{
			get
			{
				return this._Availabilities;
			}
			set
			{
				this._Availabilities.Assign(value);
			}
		}
		
		[Association(Name="FK_formfiles_persons", Storage="_Formfiles", ThisKey="Id", OtherKey="Personid", DeleteRule="NO ACTION")]
		public EntitySet<Formfile> Formfiles
		{
			get
			{
				return this._Formfiles;
			}
			set
			{
				this._Formfiles.Assign(value);
			}
		}
		
		[Association(Name="FK_newsposts_persons", Storage="_Newsposts", ThisKey="Id", OtherKey="Personid", DeleteRule="NO ACTION")]
		public EntitySet<Newspost> Newsposts
		{
			get
			{
				return this._Newsposts;
			}
			set
			{
				this._Newsposts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Availabilities(Availability entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Availabilities(Availability entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Formfiles(Formfile entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Formfiles(Formfile entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Newsposts(Newspost entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Newsposts(Newspost entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
}
#pragma warning restore 1591
