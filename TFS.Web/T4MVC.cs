// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static TFS.Web.Controllers.DashboardController Dashboard = new TFS.Web.Controllers.T4MVC_DashboardController();
    public static TFS.Web.Controllers.FlightLogsController FlightLogs = new TFS.Web.Controllers.T4MVC_FlightLogsController();
    public static TFS.Web.Controllers.FlightProgramsController FlightPrograms = new TFS.Web.Controllers.T4MVC_FlightProgramsController();
    public static TFS.Web.Controllers.ImagesController Images = new TFS.Web.Controllers.T4MVC_ImagesController();
    public static TFS.Web.Controllers.MessagesController Messages = new TFS.Web.Controllers.T4MVC_MessagesController();
    public static TFS.Web.Controllers.PersonnelRecordsController PersonnelRecords = new TFS.Web.Controllers.T4MVC_PersonnelRecordsController();
    public static TFS.Web.Controllers.SecurityController Security = new TFS.Web.Controllers.T4MVC_SecurityController();
    public static TFS.Web.Controllers.SiteController Site = new TFS.Web.Controllers.T4MVC_SiteController();
    public static TFS.Web.Controllers.UsersController Users = new TFS.Web.Controllers.T4MVC_UsersController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.ActionLink(linkText, result, null, null, null, null);
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol ?? result.GetT4MVCResult().Protocol, hostName, fragment, result.GetRouteValueDictionary(), HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol ?? result.GetT4MVCResult().Protocol, hostName, fragment, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.Action(result, null, null);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result, string protocol = null, string hostName = null) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary(), protocol ?? result.GetT4MVCResult().Protocol, hostName);
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                ModelUnbinderHelpers.AddRouteValues(currentRouteValues, pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            ModelUnbinderHelpers.AddRouteValues(routeValues, name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action, string protocol = null) {
            result.Controller = controller;
            result.Action = action;
            result.Protocol = T4MVCHelpers.IsProduction() ? protocol : null;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? "");
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; } 
    string Protocol {get; set; }  
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult {
    public T4MVC_ViewResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_RedirectToRouteResult : System.Web.Mvc.RedirectToRouteResult, IT4MVCActionResult {
    public T4MVC_RedirectToRouteResult(string area, string controller, string action, string protocol = null): base(" ", default(System.Web.Routing.RouteValueDictionary), default(bool))  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_FileContentResult : System.Web.Mvc.FileContentResult, IT4MVCActionResult {
    public T4MVC_FileContentResult(string area, string controller, string action, string protocol = null): base(new byte[0], " ")  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class @internal {
            private const string URLPATH = "~/Content/internal";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string forms_less = Url("forms.less");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class icons {
                private const string URLPATH = "~/Content/internal/icons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string announcements_png = Url("announcements.png");
                public static readonly string exclamation_png = Url("exclamation.png");
                public static readonly string flightlogs_png = Url("flightlogs.png");
                public static readonly string flightprograms_png = Url("flightprograms.png");
                public static readonly string personnelfiles_png = Url("personnelfiles.png");
                public static readonly string sort_down_gif = Url("sort_down.gif");
                public static readonly string sort_up_gif = Url("sort_up.gif");
                public static readonly string systemalert_png = Url("systemalert.png");
                public static readonly string users_png = Url("users.png");
                public static readonly string website_png = Url("website.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Content/internal/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string calendarSelector_png = Url("calendarSelector.png");
            }
        
            public static readonly string layout_less = Url("layout.less");
            public static readonly string list_table_less = Url("list-table.less");
            public static readonly string paragraph_less = Url("paragraph.less");
            public static readonly string reset_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/reset.min.css") ? Url("reset.min.css") : Url("reset.css");
                 
            public static readonly string style_less = Url("style.less");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class template {
                private const string URLPATH = "~/Content/internal/template";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bgcontainer_gif = Url("bgcontainer.gif");
                public static readonly string bgfooter_gif = Url("bgfooter.gif");
                public static readonly string bgfooter_pdn = Url("bgfooter.pdn");
                public static readonly string bgfooter_png = Url("bgfooter.png");
                public static readonly string bgheader_gif = Url("bgheader.gif");
                public static readonly string bgnavigation_gif = Url("bgnavigation.gif");
                public static readonly string bgul_gif = Url("bgul.gif");
                public static readonly string li_gif = Url("li.gif");
                public static readonly string quote_gif = Url("quote.gif");
                public static readonly string sidenavh1_gif = Url("sidenavh1.gif");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Static {
        private const string URLPATH = "~/Static";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Static/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string internal_base_layout_less = Url("internal_base_layout.less");
            public static readonly string internal_base_style_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/internal_base_style.min.css") ? Url("internal_base_style.min.css") : Url("internal_base_style.css");
                 
            public static readonly string internal_forms_layout_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/internal_forms_layout.min.css") ? Url("internal_forms_layout.min.css") : Url("internal_forms_layout.css");
                 
            public static readonly string internal_forms_style_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/internal_forms_style.min.css") ? Url("internal_forms_style.min.css") : Url("internal_forms_style.css");
                 
            public static readonly string internal_list_table_less = Url("internal_list-table.less");
            public static readonly string yui_base_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yui_base.min.css") ? Url("yui_base.min.css") : Url("yui_base.css");
                 
            public static readonly string yui_fonts_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yui_fonts.min.css") ? Url("yui_fonts.min.css") : Url("yui_fonts.css");
                 
            public static readonly string yui_reset_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yui_reset.min.css") ? Url("yui_reset.min.css") : Url("yui_reset.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Static/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string calendarSelector_png = Url("calendarSelector.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class icons {
                private const string URLPATH = "~/Static/images/icons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string announcements_png = Url("announcements.png");
                public static readonly string application_png = Url("application.png");
                public static readonly string calendar_png = Url("calendar.png");
                public static readonly string clock_png = Url("clock.png");
                public static readonly string cog_png = Url("cog.png");
                public static readonly string email_png = Url("email.png");
                public static readonly string exclamation_png = Url("exclamation.png");
                public static readonly string flightlogs_png = Url("flightlogs.png");
                public static readonly string flightprograms_png = Url("flightprograms.png");
                public static readonly string folder_png = Url("folder.png");
                public static readonly string lock_png = Url("lock.png");
                public static readonly string map_png = Url("map.png");
                public static readonly string personnelfiles_png = Url("personnelfiles.png");
                public static readonly string shield_png = Url("shield.png");
                public static readonly string sort_down_gif = Url("sort_down.gif");
                public static readonly string sort_up_gif = Url("sort_up.gif");
                public static readonly string systemalert_png = Url("systemalert.png");
                public static readonly string users_png = Url("users.png");
                public static readonly string website_png = Url("website.png");
                public static readonly string world_png = Url("world.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class internal_template {
                private const string URLPATH = "~/Static/images/internal_template";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bgcontainer_gif = Url("bgcontainer.gif");
                public static readonly string bgfooter_gif = Url("bgfooter.gif");
                public static readonly string bgfooter_pdn = Url("bgfooter.pdn");
                public static readonly string bgfooter_png = Url("bgfooter.png");
                public static readonly string bgheader_gif = Url("bgheader.gif");
                public static readonly string bgheader_png = Url("bgheader.png");
                public static readonly string bgnavigation_gif = Url("bgnavigation.gif");
                public static readonly string bgul_gif = Url("bgul.gif");
                public static readonly string li_gif = Url("li.gif");
                public static readonly string quote_gif = Url("quote.gif");
                public static readonly string sidenavh1_gif = Url("sidenavh1.gif");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class js {
            private const string URLPATH = "~/Static/js";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery {
                private const string URLPATH = "~/Static/js/jquery";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_1_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.min.js") ? Url("jquery-1.4.min.js") : Url("jquery-1.4.js");
                              
            }
        
        }
    
    }

}

public static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}

namespace TFS.Web.Controllers {
    public partial class BaseController {
        protected BaseController() { }
    }
}

namespace TFS.Web.Controllers {
    public partial class DashboardController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DashboardController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DashboardController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DashboardController Actions { get { return MVC.Dashboard; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Dashboard";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Dashboard";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_DashboardController: TFS.Web.Controllers.DashboardController {
        public T4MVC_DashboardController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class FlightLogsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FlightLogsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult List() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditFlightLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.RedirectToRouteResult DeleteFlightLog() {
            return new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.DeleteFlightLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditMission() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditMission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateMission() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateMission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.RedirectToRouteResult DeleteMission() {
            return new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.DeleteMission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditSquadronLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateSquadronLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.RedirectToRouteResult DeleteSquadronLog() {
            return new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.DeleteSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult BulkCreateSquadronLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.BulkCreateSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.FileContentResult DownloadPDF() {
            return new T4MVC_FileContentResult(Area, Name, ActionNames.DownloadPDF);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FlightLogsController Actions { get { return MVC.FlightLogs; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FlightLogs";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "FlightLogs";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string EditFlightLog = "EditFlightLog";
            public readonly string CreateFlightLog = "CreateFlightLog";
            public readonly string DeleteFlightLog = "DeleteFlightLog";
            public readonly string EditMission = "EditMission";
            public readonly string CreateMission = "CreateMission";
            public readonly string DeleteMission = "DeleteMission";
            public readonly string EditSquadronLog = "EditSquadronLog";
            public readonly string CreateSquadronLog = "CreateSquadronLog";
            public readonly string DeleteSquadronLog = "DeleteSquadronLog";
            public readonly string BulkCreateSquadronLog = "BulkCreateSquadronLog";
            public readonly string DownloadPDF = "DownloadPDF";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
            public const string List = "List";
            public const string EditFlightLog = "EditFlightLog";
            public const string CreateFlightLog = "CreateFlightLog";
            public const string DeleteFlightLog = "DeleteFlightLog";
            public const string EditMission = "EditMission";
            public const string CreateMission = "CreateMission";
            public const string DeleteMission = "DeleteMission";
            public const string EditSquadronLog = "EditSquadronLog";
            public const string CreateSquadronLog = "CreateSquadronLog";
            public const string DeleteSquadronLog = "DeleteSquadronLog";
            public const string BulkCreateSquadronLog = "BulkCreateSquadronLog";
            public const string DownloadPDF = "DownloadPDF";
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string sortType = "sortType";
            public readonly string sortDirection = "sortDirection";
        }
        static readonly ActionParamsClass_EditFlightLog s_params_EditFlightLog = new ActionParamsClass_EditFlightLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditFlightLog EditFlightLogParams { get { return s_params_EditFlightLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditFlightLog {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_DeleteFlightLog s_params_DeleteFlightLog = new ActionParamsClass_DeleteFlightLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteFlightLog DeleteFlightLogParams { get { return s_params_DeleteFlightLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteFlightLog {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_EditMission s_params_EditMission = new ActionParamsClass_EditMission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditMission EditMissionParams { get { return s_params_EditMission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditMission {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CreateMission s_params_CreateMission = new ActionParamsClass_CreateMission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateMission CreateMissionParams { get { return s_params_CreateMission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateMission {
            public readonly string flightLogId = "flightLogId";
        }
        static readonly ActionParamsClass_DeleteMission s_params_DeleteMission = new ActionParamsClass_DeleteMission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteMission DeleteMissionParams { get { return s_params_DeleteMission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteMission {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_EditSquadronLog s_params_EditSquadronLog = new ActionParamsClass_EditSquadronLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditSquadronLog EditSquadronLogParams { get { return s_params_EditSquadronLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditSquadronLog {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CreateSquadronLog s_params_CreateSquadronLog = new ActionParamsClass_CreateSquadronLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateSquadronLog CreateSquadronLogParams { get { return s_params_CreateSquadronLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateSquadronLog {
            public readonly string flightLogId = "flightLogId";
        }
        static readonly ActionParamsClass_DeleteSquadronLog s_params_DeleteSquadronLog = new ActionParamsClass_DeleteSquadronLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteSquadronLog DeleteSquadronLogParams { get { return s_params_DeleteSquadronLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteSquadronLog {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_BulkCreateSquadronLog s_params_BulkCreateSquadronLog = new ActionParamsClass_BulkCreateSquadronLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_BulkCreateSquadronLog BulkCreateSquadronLogParams { get { return s_params_BulkCreateSquadronLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_BulkCreateSquadronLog {
            public readonly string flightLogId = "flightLogId";
        }
        static readonly ActionParamsClass_DownloadPDF s_params_DownloadPDF = new ActionParamsClass_DownloadPDF();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DownloadPDF DownloadPDFParams { get { return s_params_DownloadPDF; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DownloadPDF {
            public readonly string id = "id";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string BulkCreateSquadronLog = "~/Views/FlightLogs/BulkCreateSquadronLog.aspx";
            public readonly string CreateFlightLog = "~/Views/FlightLogs/CreateFlightLog.aspx";
            public readonly string CreateMission = "~/Views/FlightLogs/CreateMission.aspx";
            public readonly string CreateSquadronLog = "~/Views/FlightLogs/CreateSquadronLog.aspx";
            public readonly string EditFlightLog = "~/Views/FlightLogs/EditFlightLog.aspx";
            public readonly string EditMission = "~/Views/FlightLogs/EditMission.aspx";
            public readonly string EditSquadronLog = "~/Views/FlightLogs/EditSquadronLog.aspx";
            public readonly string List = "~/Views/FlightLogs/List.aspx";
            public readonly string MissionForm = "~/Views/FlightLogs/MissionForm.ascx";
            public readonly string SquadronLogForm = "~/Views/FlightLogs/SquadronLogForm.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_FlightLogsController: TFS.Web.Controllers.FlightLogsController {
        public T4MVC_FlightLogsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult List(string sortType, System.Web.UI.WebControls.SortDirection? sortDirection) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortType", sortType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortDirection", sortDirection);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditFlightLog(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditFlightLog(System.Guid id, TFS.Web.ViewModels.FlightLogs.FlightLogViewModel flightLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditFlightLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightLogViewModel", flightLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateFlightLog() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateFlightLog);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateFlightLog(TFS.Web.ViewModels.FlightLogs.FlightLogViewModel flightLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateFlightLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightLogViewModel", flightLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult DeleteFlightLog(System.Guid id) {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.DeleteFlightLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditMission(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditMission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditMission(System.Guid id, TFS.Web.ViewModels.FlightLogs.MissionViewModel missionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditMission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "missionViewModel", missionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateMission(System.Guid flightLogId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateMission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightLogId", flightLogId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateMission(TFS.Web.ViewModels.FlightLogs.MissionViewModel missionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateMission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "missionViewModel", missionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult DeleteMission(System.Guid id) {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.DeleteMission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditSquadronLog(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditSquadronLog(System.Guid id, TFS.Web.ViewModels.FlightLogs.SquadronLogViewModel squadronLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "squadronLogViewModel", squadronLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateSquadronLog(System.Guid flightLogId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightLogId", flightLogId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateSquadronLog(TFS.Web.ViewModels.FlightLogs.SquadronLogViewModel squadronLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "squadronLogViewModel", squadronLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult DeleteSquadronLog(System.Guid id) {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.DeleteSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult BulkCreateSquadronLog(System.Guid flightLogId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.BulkCreateSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightLogId", flightLogId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult BulkCreateSquadronLog(TFS.Web.ViewModels.FlightLogs.SquadronLogViewModel squadronLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.BulkCreateSquadronLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "squadronLogViewModel", squadronLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.FileContentResult DownloadPDF(System.Guid id) {
            var callInfo = new T4MVC_FileContentResult(Area, Name, ActionNames.DownloadPDF);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class FlightProgramsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FlightProgramsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult Manage() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.Manage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditFlightProgram() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightProgram);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult RenamePosition() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.RenamePosition);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateProgramLocation() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateProgramLocation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditProgramLocation() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditProgramLocation);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FlightProgramsController Actions { get { return MVC.FlightPrograms; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FlightPrograms";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "FlightPrograms";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string Manage = "Manage";
            public readonly string CreateFlightProgram = "CreateFlightProgram";
            public readonly string EditFlightProgram = "EditFlightProgram";
            public readonly string CreatePosition = "CreatePosition";
            public readonly string RenamePosition = "RenamePosition";
            public readonly string CreateProgramLocation = "CreateProgramLocation";
            public readonly string EditProgramLocation = "EditProgramLocation";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
            public const string Manage = "Manage";
            public const string CreateFlightProgram = "CreateFlightProgram";
            public const string EditFlightProgram = "EditFlightProgram";
            public const string CreatePosition = "CreatePosition";
            public const string RenamePosition = "RenamePosition";
            public const string CreateProgramLocation = "CreateProgramLocation";
            public const string EditProgramLocation = "EditProgramLocation";
        }


        static readonly ActionParamsClass_Manage s_params_Manage = new ActionParamsClass_Manage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Manage ManageParams { get { return s_params_Manage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Manage {
            public readonly string showAllPrograms = "showAllPrograms";
        }
        static readonly ActionParamsClass_EditFlightProgram s_params_EditFlightProgram = new ActionParamsClass_EditFlightProgram();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditFlightProgram EditFlightProgramParams { get { return s_params_EditFlightProgram; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditFlightProgram {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_RenamePosition s_params_RenamePosition = new ActionParamsClass_RenamePosition();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RenamePosition RenamePositionParams { get { return s_params_RenamePosition; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RenamePosition {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CreateProgramLocation s_params_CreateProgramLocation = new ActionParamsClass_CreateProgramLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateProgramLocation CreateProgramLocationParams { get { return s_params_CreateProgramLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateProgramLocation {
            public readonly string flightProgramId = "flightProgramId";
        }
        static readonly ActionParamsClass_EditProgramLocation s_params_EditProgramLocation = new ActionParamsClass_EditProgramLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditProgramLocation EditProgramLocationParams { get { return s_params_EditProgramLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditProgramLocation {
            public readonly string id = "id";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string CreateFlightProgram = "~/Views/FlightPrograms/CreateFlightProgram.aspx";
            public readonly string CreatePosition = "~/Views/FlightPrograms/CreatePosition.aspx";
            public readonly string CreateProgramLocation = "~/Views/FlightPrograms/CreateProgramLocation.aspx";
            public readonly string EditFlightProgram = "~/Views/FlightPrograms/EditFlightProgram.aspx";
            public readonly string EditPosition = "~/Views/FlightPrograms/EditPosition.aspx";
            public readonly string EditProgramLocation = "~/Views/FlightPrograms/EditProgramLocation.aspx";
            public readonly string FlightProgramInfo = "~/Views/FlightPrograms/FlightProgramInfo.ascx";
            public readonly string Manage = "~/Views/FlightPrograms/Manage.aspx";
            public readonly string PositionTitle = "~/Views/FlightPrograms/PositionTitle.ascx";
            public readonly string ProgramLocationInfo = "~/Views/FlightPrograms/ProgramLocationInfo.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_FlightProgramsController: TFS.Web.Controllers.FlightProgramsController {
        public T4MVC_FlightProgramsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Manage(bool? showAllPrograms) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Manage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "showAllPrograms", showAllPrograms);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateFlightProgram() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateFlightProgram);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateFlightProgram(TFS.Web.ViewModels.FlightPrograms.FlightProgramViewModel flightProgramViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateFlightProgram);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightProgramViewModel", flightProgramViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditFlightProgram(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightProgram);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditFlightProgram(System.Guid id, TFS.Web.ViewModels.FlightPrograms.FlightProgramViewModel flightProgramViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditFlightProgram);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightProgramViewModel", flightProgramViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreatePosition() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreatePosition);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreatePosition(TFS.Web.ViewModels.FlightPrograms.PositionViewModel positionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreatePosition);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "positionViewModel", positionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult RenamePosition(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.RenamePosition);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult RenamePosition(System.Guid id, TFS.Web.ViewModels.FlightPrograms.PositionViewModel positionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.RenamePosition);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "positionViewModel", positionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateProgramLocation(System.Guid flightProgramId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateProgramLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "flightProgramId", flightProgramId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateProgramLocation(TFS.Web.ViewModels.FlightPrograms.ProgramLocationViewModel programLocationViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateProgramLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "programLocationViewModel", programLocationViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditProgramLocation(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditProgramLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditProgramLocation(TFS.Web.ViewModels.FlightPrograms.ProgramLocationViewModel programLocationViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditProgramLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "programLocationViewModel", programLocationViewModel);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class ImagesController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ImagesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult StaticImage() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.StaticImage);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImagesController Actions { get { return MVC.Images; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Images";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Images";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string StaticImage = "StaticImage";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string StaticImage = "StaticImage";
        }


        static readonly ActionParamsClass_StaticImage s_params_StaticImage = new ActionParamsClass_StaticImage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_StaticImage StaticImageParams { get { return s_params_StaticImage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_StaticImage {
            public readonly string id = "id";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ImagesController: TFS.Web.Controllers.ImagesController {
        public T4MVC_ImagesController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult StaticImage(System.Guid id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.StaticImage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class MessagesController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected MessagesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ListAllMessages() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ListAllMessages);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateMessage() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateMessage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ViewMessage() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ViewMessage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult CreateAnnouncement() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.CreateAnnouncement);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult CreateSystemAlert() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.CreateSystemAlert);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public MessagesController Actions { get { return MVC.Messages; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Messages";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Messages";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string ListMessages = "ListMessages";
            public readonly string ListAllMessages = "ListAllMessages";
            public readonly string CreateMessage = "CreateMessage";
            public readonly string ViewMessage = "ViewMessage";
            public readonly string CreateAnnouncement = "CreateAnnouncement";
            public readonly string CreateSystemAlert = "CreateSystemAlert";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string ListMessages = "ListMessages";
            public const string ListAllMessages = "ListAllMessages";
            public const string CreateMessage = "CreateMessage";
            public const string ViewMessage = "ViewMessage";
            public const string CreateAnnouncement = "CreateAnnouncement";
            public const string CreateSystemAlert = "CreateSystemAlert";
        }


        static readonly ActionParamsClass_ListAllMessages s_params_ListAllMessages = new ActionParamsClass_ListAllMessages();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListAllMessages ListAllMessagesParams { get { return s_params_ListAllMessages; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListAllMessages {
            public readonly string messageType = "messageType";
        }
        static readonly ActionParamsClass_CreateMessage s_params_CreateMessage = new ActionParamsClass_CreateMessage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateMessage CreateMessageParams { get { return s_params_CreateMessage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateMessage {
            public readonly string messageType = "messageType";
        }
        static readonly ActionParamsClass_ViewMessage s_params_ViewMessage = new ActionParamsClass_ViewMessage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewMessage ViewMessageParams { get { return s_params_ViewMessage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewMessage {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CreateAnnouncement s_params_CreateAnnouncement = new ActionParamsClass_CreateAnnouncement();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateAnnouncement CreateAnnouncementParams { get { return s_params_CreateAnnouncement; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateAnnouncement {
            public readonly string announcementViewModel = "announcementViewModel";
        }
        static readonly ActionParamsClass_CreateSystemAlert s_params_CreateSystemAlert = new ActionParamsClass_CreateSystemAlert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateSystemAlert CreateSystemAlertParams { get { return s_params_CreateSystemAlert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateSystemAlert {
            public readonly string systemAlertViewModel = "systemAlertViewModel";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string CreateMessage = "~/Views/Messages/CreateMessage.aspx";
            public readonly string EditAnnouncement = "~/Views/Messages/EditAnnouncement.ascx";
            public readonly string EditMessage = "~/Views/Messages/EditMessage.aspx";
            public readonly string EditSystemAlert = "~/Views/Messages/EditSystemAlert.ascx";
            public readonly string ListMessages = "~/Views/Messages/ListMessages.aspx";
            public readonly string ViewAnnouncement = "~/Views/Messages/ViewAnnouncement.ascx";
            public readonly string ViewMessage = "~/Views/Messages/ViewMessage.aspx";
            public readonly string ViewSystemAlert = "~/Views/Messages/ViewSystemAlert.ascx";
            public readonly string ViewUserAlert = "~/Views/Messages/ViewUserAlert.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_MessagesController: TFS.Web.Controllers.MessagesController {
        public T4MVC_MessagesController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult ListMessages() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ListMessages);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ListAllMessages(TFS.Models.Messages.MessageType messageType) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ListAllMessages);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "messageType", messageType);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateMessage(TFS.Models.Messages.MessageType messageType) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateMessage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "messageType", messageType);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ViewMessage(System.Guid id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ViewMessage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateAnnouncement(TFS.Web.ViewModels.Messages.AnnouncementViewModel announcementViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateAnnouncement);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "announcementViewModel", announcementViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateSystemAlert(TFS.Web.ViewModels.Messages.SystemAlertViewModel systemAlertViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateSystemAlert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "systemAlertViewModel", systemAlertViewModel);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class PersonnelRecordsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PersonnelRecordsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult List() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditRecord() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditRecord);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditPersonalInfo() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditPersonalInfo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditContactInfo() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditContactInfo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditCompanyInfo() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditCompanyInfo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditQualifications() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditQualifications);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PersonnelRecordsController Actions { get { return MVC.PersonnelRecords; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "PersonnelRecords";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "PersonnelRecords";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = "List";
            public readonly string EditRecord = "EditRecord";
            public readonly string EditMyRecord = "EditMyRecord";
            public readonly string EditPersonalInfo = "EditPersonalInfo";
            public readonly string EditContactInfo = "EditContactInfo";
            public readonly string EditCompanyInfo = "EditCompanyInfo";
            public readonly string EditQualifications = "EditQualifications";
            public readonly string DownloadAllAsCsv = "DownloadAllAsCsv";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string List = "List";
            public const string EditRecord = "EditRecord";
            public const string EditMyRecord = "EditMyRecord";
            public const string EditPersonalInfo = "EditPersonalInfo";
            public const string EditContactInfo = "EditContactInfo";
            public const string EditCompanyInfo = "EditCompanyInfo";
            public const string EditQualifications = "EditQualifications";
            public const string DownloadAllAsCsv = "DownloadAllAsCsv";
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string sortType = "sortType";
            public readonly string sortDirection = "sortDirection";
            public readonly string page = "page";
            public readonly string itemsPerPage = "itemsPerPage";
        }
        static readonly ActionParamsClass_EditRecord s_params_EditRecord = new ActionParamsClass_EditRecord();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditRecord EditRecordParams { get { return s_params_EditRecord; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditRecord {
            public readonly string username = "username";
        }
        static readonly ActionParamsClass_EditPersonalInfo s_params_EditPersonalInfo = new ActionParamsClass_EditPersonalInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditPersonalInfo EditPersonalInfoParams { get { return s_params_EditPersonalInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditPersonalInfo {
            public readonly string username = "username";
            public readonly string editingMyRecord = "editingMyRecord";
            public readonly string personalInfo = "personalInfo";
        }
        static readonly ActionParamsClass_EditContactInfo s_params_EditContactInfo = new ActionParamsClass_EditContactInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditContactInfo EditContactInfoParams { get { return s_params_EditContactInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditContactInfo {
            public readonly string username = "username";
            public readonly string editingMyRecord = "editingMyRecord";
            public readonly string contactInfo = "contactInfo";
        }
        static readonly ActionParamsClass_EditCompanyInfo s_params_EditCompanyInfo = new ActionParamsClass_EditCompanyInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCompanyInfo EditCompanyInfoParams { get { return s_params_EditCompanyInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCompanyInfo {
            public readonly string username = "username";
            public readonly string editingMyRecord = "editingMyRecord";
            public readonly string companyInfo = "companyInfo";
        }
        static readonly ActionParamsClass_EditQualifications s_params_EditQualifications = new ActionParamsClass_EditQualifications();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditQualifications EditQualificationsParams { get { return s_params_EditQualifications; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditQualifications {
            public readonly string username = "username";
            public readonly string editingMyRecord = "editingMyRecord";
            public readonly string qualifications = "qualifications";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string EditRecord = "~/Views/PersonnelRecords/EditRecord.aspx";
            public readonly string List = "~/Views/PersonnelRecords/List.aspx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_PersonnelRecordsController: TFS.Web.Controllers.PersonnelRecordsController {
        public T4MVC_PersonnelRecordsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult List(string sortType, System.Web.UI.WebControls.SortDirection? sortDirection, int? page, int? itemsPerPage) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortType", sortType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortDirection", sortDirection);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "itemsPerPage", itemsPerPage);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditRecord(string username) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditRecord);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditMyRecord() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditMyRecord);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditPersonalInfo(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.PersonalInfo personalInfo) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditPersonalInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "editingMyRecord", editingMyRecord);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "personalInfo", personalInfo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditContactInfo(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.ContactInfo contactInfo) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditContactInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "editingMyRecord", editingMyRecord);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "contactInfo", contactInfo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditCompanyInfo(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.CompanyInfo companyInfo) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditCompanyInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "editingMyRecord", editingMyRecord);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "companyInfo", companyInfo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditQualifications(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.QualificationViewModel qualifications) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditQualifications);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "editingMyRecord", editingMyRecord);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "qualifications", qualifications);
            return callInfo;
        }

        public override System.Web.Mvc.FileContentResult DownloadAllAsCsv() {
            var callInfo = new T4MVC_FileContentResult(Area, Name, ActionNames.DownloadAllAsCsv);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class SecurityController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SecurityController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult LogOn() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.LogOn);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Authenticate() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Authenticate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult OAuth2callback() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.OAuth2callback);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SecurityController Actions { get { return MVC.Security; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Security";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Security";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string LogOn = "LogOn";
            public readonly string Authenticate = "Authenticate";
            public readonly string OAuth2callback = "OAuth2callback";
            public readonly string LogOff = "LogOff";
            public readonly string ChangePassword = "ChangePassword";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
            public const string LogOn = "LogOn";
            public const string Authenticate = "Authenticate";
            public const string OAuth2callback = "OAuth2callback";
            public const string LogOff = "LogOff";
            public const string ChangePassword = "ChangePassword";
        }


        static readonly ActionParamsClass_LogOn s_params_LogOn = new ActionParamsClass_LogOn();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LogOn LogOnParams { get { return s_params_LogOn; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LogOn {
            public readonly string returnUrl = "returnUrl";
        }
        static readonly ActionParamsClass_Authenticate s_params_Authenticate = new ActionParamsClass_Authenticate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Authenticate AuthenticateParams { get { return s_params_Authenticate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Authenticate {
            public readonly string username = "username";
            public readonly string password = "password";
        }
        static readonly ActionParamsClass_OAuth2callback s_params_OAuth2callback = new ActionParamsClass_OAuth2callback();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OAuth2callback OAuth2callbackParams { get { return s_params_OAuth2callback; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OAuth2callback {
            public readonly string state = "state";
            public readonly string code = "code";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string ChangePassword = "~/Views/Security/ChangePassword.aspx";
            public readonly string LogOn = "~/Views/Security/LogOn.aspx";
            public readonly string NotAUser = "~/Views/Security/NotAUser.aspx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_SecurityController: TFS.Web.Controllers.SecurityController {
        public T4MVC_SecurityController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult LogOn(System.Uri returnUrl) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.LogOn);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Authenticate(string username, string password) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Authenticate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult OAuth2callback(string state, string code) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.OAuth2callback);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "state", state);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult LogOff() {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.LogOff);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ChangePassword() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ChangePassword);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ChangePassword(string password, string confirmPassword) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ChangePassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "confirmPassword", confirmPassword);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class SiteController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SiteController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SiteController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SiteController Actions { get { return MVC.Site; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Site";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Site";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_SiteController: TFS.Web.Controllers.SiteController {
        public T4MVC_SiteController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class UsersController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UsersController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult List() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult Edit() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.Edit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ChangePassword() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ChangePassword);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UsersController Actions { get { return MVC.Users; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Users";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Users";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Edit = "Edit";
            public readonly string ChangePassword = "ChangePassword";
            public readonly string Create = "Create";
            public readonly string RateGroups = "RateGroups";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
            public const string List = "List";
            public const string Edit = "Edit";
            public const string ChangePassword = "ChangePassword";
            public const string Create = "Create";
            public const string RateGroups = "RateGroups";
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string sortType = "sortType";
            public readonly string sortDirection = "sortDirection";
            public readonly string page = "page";
            public readonly string itemsPerPage = "itemsPerPage";
            public readonly string showAll = "showAll";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit {
            public readonly string username = "username";
        }
        static readonly ActionParamsClass_ChangePassword s_params_ChangePassword = new ActionParamsClass_ChangePassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangePassword ChangePasswordParams { get { return s_params_ChangePassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangePassword {
            public readonly string username = "username";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string ChangePassword = "~/Views/Users/ChangePassword.aspx";
            public readonly string Create = "~/Views/Users/Create.aspx";
            public readonly string Edit = "~/Views/Users/Edit.aspx";
            public readonly string List = "~/Views/Users/List.aspx";
            public readonly string UserInformation = "~/Views/Users/UserInformation.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_UsersController: TFS.Web.Controllers.UsersController {
        public T4MVC_UsersController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult List(string sortType, System.Web.UI.WebControls.SortDirection? sortDirection, int? page, int? itemsPerPage, bool? showAll) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortType", sortType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortDirection", sortDirection);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "itemsPerPage", itemsPerPage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "showAll", showAll);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Edit(string username) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(TFS.Web.ViewModels.UserViewModel userViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userViewModel", userViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ChangePassword(string username) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ChangePassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ChangePassword(TFS.Web.ViewModels.UserViewModel userViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ChangePassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userViewModel", userViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Create() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Create);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Create(TFS.Web.ViewModels.UserViewModel userViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userViewModel", userViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult RateGroups() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.RateGroups);
            return callInfo;
        }

    }
}

namespace T4MVC {
    public class SharedController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Success = "~/Views/Shared/Success.aspx";
        }
    }

}




#endregion T4MVC
#pragma warning restore 1591

namespace System.Web.Mvc {
    #region ModelUnbinders
    [GeneratedCode("T4MVC", "2.0")]
    public interface IModelUnbinder {
        void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue);
    }
    [GeneratedCode("T4MVC", "2.0")]
    public interface IModelUnbinder<in T> where T : class {
        void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, T routeValue);
    }
    [GeneratedCode("T4MVC", "2.0")]
        public class ModelUnbinders {
        private class GenericModelUnbinderWrapper<T> : IModelUnbinder where T : class {
            private readonly IModelUnbinder<T> _unbinder;

            public GenericModelUnbinderWrapper(IModelUnbinder<T> unbinder) {
                _unbinder = unbinder;
            }

            public void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
                var typedObject = routeValue as T;
                _unbinder.UnbindModel(routeValueDictionary, routeName, typedObject);
            }
        }
        
        private readonly Dictionary<Type, IModelUnbinder> _unbinders = new Dictionary<Type, IModelUnbinder>();
        public virtual void Add(Type type, IModelUnbinder unbinder) {
            _unbinders[type] = unbinder;
        }
        public virtual void Add<T>(IModelUnbinder<T> unbinder) where T : class {
            Add(typeof(T), new GenericModelUnbinderWrapper<T>(unbinder));
        }
        public virtual IModelUnbinder FindUnbinderFor(Type type) {
            IModelUnbinder resultUnbinder = null;
            Type baseType = null;
            foreach (var unbinder in _unbinders) {
                if (unbinder.Key.IsAssignableFrom(type)) {
                    if ((baseType == null) || baseType.IsAssignableFrom(unbinder.Key)) {
                        resultUnbinder = unbinder.Value;
                        baseType = unbinder.Key;
                    }
                }
            }
            return resultUnbinder;
        }
        
        public virtual void Clear() {
            _unbinders.Clear();
        }
    }
    [GeneratedCode("T4MVC", "2.0")]
    public class DefaultModelUnbinder : IModelUnbinder {
        public void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
            routeValueDictionary.Add(routeName, routeValue);
        }
    }
    [GeneratedCode("T4MVC", "2.0")]
    public class PropertiesUnbinder : IModelUnbinder {
        public virtual void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
            var dict = new RouteValueDictionary(routeValue);
            foreach (var entry in dict) {
                var name = entry.Key;

                if (!(entry.Value is string) && (entry.Value is System.Collections.IEnumerable)) {
                    var enumerableValue = (System.Collections.IEnumerable)entry.Value;
                    var i = 0;
                    foreach (var enumerableElement in enumerableValue) {
                        ModelUnbinderHelpers.AddRouteValues(routeValueDictionary, string.Format("{0}.{1}[{2}]", routeName, name, i), enumerableElement);
                        i++;
                    }
                }
                else {
                    ModelUnbinderHelpers.AddRouteValues(routeValueDictionary, routeName + "." + name, entry.Value);
                }
            }
        }
    }
    public class ModelUnbinderHelpers {
        public static void AddRouteValues(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
            IModelUnbinder unbinder = DefaultModelUnbinder;
            if (routeValue != null)
            {
                unbinder = ModelUnbinders.FindUnbinderFor(routeValue.GetType()) ?? DefaultModelUnbinder;
            }
            unbinder.UnbindModel(routeValueDictionary, routeName, routeValue);
        }
    
        private static readonly ModelUnbinders _modelUnbinders = new ModelUnbinders();
        public static ModelUnbinders ModelUnbinders {
            get { return _modelUnbinders; }
        }

        public static IModelUnbinder DefaultModelUnbinder { get; set; }
        static ModelUnbinderHelpers() {
            DefaultModelUnbinder = new DefaultModelUnbinder();
        }
    }
}
    #endregion




