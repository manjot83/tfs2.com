// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static TFS.Web.Controllers.DashboardController Dashboard = new TFS.Web.Controllers.T4MVC_DashboardController();
    public static TFS.Web.Controllers.FlightLogsController FlightLogs = new TFS.Web.Controllers.T4MVC_FlightLogsController();
    public static TFS.Web.Controllers.FlightProgramsController FlightPrograms = new TFS.Web.Controllers.T4MVC_FlightProgramsController();
    public static TFS.Web.Controllers.ImagesController Images = new TFS.Web.Controllers.T4MVC_ImagesController();
    public static TFS.Web.Controllers.MessagesController Messages = new TFS.Web.Controllers.T4MVC_MessagesController();
    public static TFS.Web.Controllers.PersonnelRecordsController PersonnelRecords = new TFS.Web.Controllers.T4MVC_PersonnelRecordsController();
    public static TFS.Web.Controllers.SecurityController Security = new TFS.Web.Controllers.T4MVC_SecurityController();
    public static TFS.Web.Controllers.SiteController Site = new TFS.Web.Controllers.T4MVC_SiteController();
    public static TFS.Web.Controllers.UsersController Users = new TFS.Web.Controllers.T4MVC_UsersController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return routes.MapRoute(name, url, result, (ActionResult)null);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            // Create and add the route
            var route = new Route(url, routeValues, new MvcRouteHandler());
            routes.Add(name, route);
            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC methods can only be passed pseudo-action calls (e.g. MVC.Home.About()), and not real action calls.");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
             
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }
    }
}

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult {
    public T4MVC_ViewResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_FileContentResult : System.Web.Mvc.FileContentResult, IT4MVCActionResult {
    public T4MVC_FileContentResult(string area, string controller, string action): base(new byte[0], " ")  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_RedirectToRouteResult : System.Web.Mvc.RedirectToRouteResult, IT4MVCActionResult {
    public T4MVC_RedirectToRouteResult(string area, string controller, string action): base(" ", default(System.Web.Routing.RouteValueDictionary))  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class @internal {
            private const string URLPATH = "~/Content/internal";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string forms_less = Url("forms.less");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class icons {
                private const string URLPATH = "~/Content/internal/icons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string announcements_png = Url("announcements.png");
                public static readonly string exclamation_png = Url("exclamation.png");
                public static readonly string flightlogs_png = Url("flightlogs.png");
                public static readonly string flightprograms_png = Url("flightprograms.png");
                public static readonly string personnelfiles_png = Url("personnelfiles.png");
                public static readonly string sort_down_gif = Url("sort_down.gif");
                public static readonly string sort_up_gif = Url("sort_up.gif");
                public static readonly string systemalert_png = Url("systemalert.png");
                public static readonly string users_png = Url("users.png");
                public static readonly string website_png = Url("website.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Content/internal/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string calendarSelector_png = Url("calendarSelector.png");
            }
        
            public static readonly string layout_less = Url("layout.less");
            public static readonly string list_table_less = Url("list-table.less");
            public static readonly string paragraph_less = Url("paragraph.less");
            public static readonly string reset_css = Url("reset.css");
            public static readonly string style_less = Url("style.less");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class template {
                private const string URLPATH = "~/Content/internal/template";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bgcontainer_gif = Url("bgcontainer.gif");
                public static readonly string bgfooter_gif = Url("bgfooter.gif");
                public static readonly string bgfooter_pdn = Url("bgfooter.pdn");
                public static readonly string bgfooter_png = Url("bgfooter.png");
                public static readonly string bgheader_gif = Url("bgheader.gif");
                public static readonly string bgnavigation_gif = Url("bgnavigation.gif");
                public static readonly string bgul_gif = Url("bgul.gif");
                public static readonly string li_gif = Url("li.gif");
                public static readonly string quote_gif = Url("quote.gif");
                public static readonly string sidenavh1_gif = Url("sidenavh1.gif");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class @public {
            private const string URLPATH = "~/Content/public";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class banners {
                private const string URLPATH = "~/Content/public/banners";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string aircrew_login_gif = Url("aircrew_login.gif");
                public static readonly string contact_gif = Url("contact.gif");
                public static readonly string experience_gif = Url("experience.gif");
                public static readonly string programs_gif = Url("programs.gif");
                public static readonly string services_gif = Url("services.gif");
                public static readonly string welcome_gif = Url("welcome.gif");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class headers {
                private const string URLPATH = "~/Content/public/headers";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string header01_jpg = Url("header01.jpg");
                public static readonly string header02_jpg = Url("header02.jpg");
                public static readonly string header03_jpg = Url("header03.jpg");
                public static readonly string header04_jpg = Url("header04.jpg");
                public static readonly string header05_jpg = Url("header05.jpg");
            }
        
            public static readonly string imagerollover_css = Url("imagerollover.css");
            public static readonly string layout_css = Url("layout.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class login {
                private const string URLPATH = "~/Content/public/login";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string index_r3_c1_jpg = Url("index_r3_c1.jpg");
                public static readonly string loginlayout_r1_c1_jpg = Url("loginlayout_r1_c1.jpg");
                public static readonly string loginlayout_r2_c1_jpg = Url("loginlayout_r2_c1.jpg");
                public static readonly string loginlayout_r3_c1_jpg = Url("loginlayout_r3_c1.jpg");
                public static readonly string loginlayout_r3_c2_jpg = Url("loginlayout_r3_c2.jpg");
                public static readonly string loginlayout_r3_c3_jpg = Url("loginlayout_r3_c3.jpg");
                public static readonly string loginlayout_r4_c1_jpg = Url("loginlayout_r4_c1.jpg");
                public static readonly string spacer_gif = Url("spacer.gif");
                public static readonly string submit_gif = Url("submit.gif");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class rollovers {
                private const string URLPATH = "~/Content/public/rollovers";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string contact_gif = Url("contact.gif");
                public static readonly string contact_rollover_gif = Url("contact_rollover.gif");
                public static readonly string experience_gif = Url("experience.gif");
                public static readonly string experience_rollover_gif = Url("experience_rollover.gif");
                public static readonly string home_gif = Url("home.gif");
                public static readonly string home_rollover_gif = Url("home_rollover.gif");
                public static readonly string logon_gif = Url("logon.gif");
                public static readonly string logon_rollover_gif = Url("logon_rollover.gif");
                public static readonly string programs_gif = Url("programs.gif");
                public static readonly string programs_rollover_gif = Url("programs_rollover.gif");
                public static readonly string services_gif = Url("services.gif");
                public static readonly string services_rollover_gif = Url("services_rollover.gif");
            }
        
            public static readonly string tags_css = Url("tags.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class template {
                private const string URLPATH = "~/Content/public/template";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string content_bg_gif = Url("content_bg.gif");
                public static readonly string footer_gif = Url("footer.gif");
                public static readonly string item_jpg = Url("item.jpg");
                public static readonly string item_hover_jpg = Url("item_hover.jpg");
                public static readonly string spacer_gif = Url("spacer.gif");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Static {
        private const string URLPATH = "~/Static";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Static/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string internal_base_layout_less = Url("internal_base_layout.less");
            public static readonly string internal_base_style_css = Url("internal_base_style.css");
            public static readonly string internal_forms_layout_css = Url("internal_forms_layout.css");
            public static readonly string internal_forms_style_css = Url("internal_forms_style.css");
            public static readonly string internal_list_table_less = Url("internal_list-table.less");
            public static readonly string yui_base_css = Url("yui_base.css");
            public static readonly string yui_fonts_css = Url("yui_fonts.css");
            public static readonly string yui_reset_css = Url("yui_reset.css");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Static/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string calendarSelector_png = Url("calendarSelector.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class icons {
                private const string URLPATH = "~/Static/images/icons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string announcements_png = Url("announcements.png");
                public static readonly string application_png = Url("application.png");
                public static readonly string calendar_png = Url("calendar.png");
                public static readonly string clock_png = Url("clock.png");
                public static readonly string cog_png = Url("cog.png");
                public static readonly string email_png = Url("email.png");
                public static readonly string exclamation_png = Url("exclamation.png");
                public static readonly string flightlogs_png = Url("flightlogs.png");
                public static readonly string flightprograms_png = Url("flightprograms.png");
                public static readonly string folder_png = Url("folder.png");
                public static readonly string lock_png = Url("lock.png");
                public static readonly string map_png = Url("map.png");
                public static readonly string personnelfiles_png = Url("personnelfiles.png");
                public static readonly string shield_png = Url("shield.png");
                public static readonly string sort_down_gif = Url("sort_down.gif");
                public static readonly string sort_up_gif = Url("sort_up.gif");
                public static readonly string systemalert_png = Url("systemalert.png");
                public static readonly string users_png = Url("users.png");
                public static readonly string website_png = Url("website.png");
                public static readonly string world_png = Url("world.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class internal_template {
                private const string URLPATH = "~/Static/images/internal_template";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bgcontainer_gif = Url("bgcontainer.gif");
                public static readonly string bgfooter_gif = Url("bgfooter.gif");
                public static readonly string bgfooter_pdn = Url("bgfooter.pdn");
                public static readonly string bgfooter_png = Url("bgfooter.png");
                public static readonly string bgheader_gif = Url("bgheader.gif");
                public static readonly string bgheader_png = Url("bgheader.png");
                public static readonly string bgnavigation_gif = Url("bgnavigation.gif");
                public static readonly string bgul_gif = Url("bgul.gif");
                public static readonly string li_gif = Url("li.gif");
                public static readonly string quote_gif = Url("quote.gif");
                public static readonly string sidenavh1_gif = Url("sidenavh1.gif");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class js {
            private const string URLPATH = "~/Static/js";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_1_3_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.3.2.min.js") ? Url("jquery-1.3.2.min.js") : Url("jquery-1.3.2.js");
        }
    
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}


namespace TFS.Web.Controllers {
    public partial class DashboardController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DashboardController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DashboardController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DashboardController Actions { get { return MVC.Dashboard; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Dashboard";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Index = "~/Views/Dashboard/Index.aspx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_DashboardController: TFS.Web.Controllers.DashboardController {
        public T4MVC_DashboardController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class FlightLogsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FlightLogsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult List() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditFlightLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditMission() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditMission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateMission() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateMission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditSquadronLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateSquadronLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult BulkCreateSquadronLog() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.BulkCreateSquadronLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.FileContentResult DownloadPDF() {
            return new T4MVC_FileContentResult(Area, Name, ActionNames.DownloadPDF);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FlightLogsController Actions { get { return MVC.FlightLogs; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FlightLogs";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string EditFlightLog = "EditFlightLog";
            public readonly string CreateFlightLog = "CreateFlightLog";
            public readonly string EditMission = "EditMission";
            public readonly string CreateMission = "CreateMission";
            public readonly string EditSquadronLog = "EditSquadronLog";
            public readonly string CreateSquadronLog = "CreateSquadronLog";
            public readonly string BulkCreateSquadronLog = "BulkCreateSquadronLog";
            public readonly string DownloadPDF = "DownloadPDF";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string BulkCreateSquadronLog = "~/Views/FlightLogs/BulkCreateSquadronLog.aspx";
            public readonly string CreateFlightLog = "~/Views/FlightLogs/CreateFlightLog.aspx";
            public readonly string CreateMission = "~/Views/FlightLogs/CreateMission.aspx";
            public readonly string CreateSquadronLog = "~/Views/FlightLogs/CreateSquadronLog.aspx";
            public readonly string EditFlightLog = "~/Views/FlightLogs/EditFlightLog.aspx";
            public readonly string EditMission = "~/Views/FlightLogs/EditMission.aspx";
            public readonly string EditSquadronLog = "~/Views/FlightLogs/EditSquadronLog.aspx";
            public readonly string List = "~/Views/FlightLogs/List.aspx";
            public readonly string MissionForm = "~/Views/FlightLogs/MissionForm.ascx";
            public readonly string SquadronLogForm = "~/Views/FlightLogs/SquadronLogForm.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_FlightLogsController: TFS.Web.Controllers.FlightLogsController {
        public T4MVC_FlightLogsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult List(string sortType, System.Web.UI.WebControls.SortDirection? sortDirection) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.List);
            callInfo.RouteValueDictionary.Add("sortType", sortType);
            callInfo.RouteValueDictionary.Add("sortDirection", sortDirection);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditFlightLog(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightLog);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditFlightLog(int id, TFS.Web.ViewModels.FlightLogs.FlightLogViewModel flightLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditFlightLog);
            callInfo.RouteValueDictionary.Add("id", id);
            callInfo.RouteValueDictionary.Add("flightLogViewModel", flightLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateFlightLog() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateFlightLog);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateFlightLog(TFS.Web.ViewModels.FlightLogs.FlightLogViewModel flightLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateFlightLog);
            callInfo.RouteValueDictionary.Add("flightLogViewModel", flightLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditMission(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditMission);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditMission(int id, TFS.Web.ViewModels.FlightLogs.MissionViewModel missionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditMission);
            callInfo.RouteValueDictionary.Add("id", id);
            callInfo.RouteValueDictionary.Add("missionViewModel", missionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateMission(int flightLogId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateMission);
            callInfo.RouteValueDictionary.Add("flightLogId", flightLogId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateMission(TFS.Web.ViewModels.FlightLogs.MissionViewModel missionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateMission);
            callInfo.RouteValueDictionary.Add("missionViewModel", missionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditSquadronLog(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditSquadronLog);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditSquadronLog(int id, TFS.Web.ViewModels.FlightLogs.SquadronLogViewModel squadronLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditSquadronLog);
            callInfo.RouteValueDictionary.Add("id", id);
            callInfo.RouteValueDictionary.Add("squadronLogViewModel", squadronLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateSquadronLog(int flightLogId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateSquadronLog);
            callInfo.RouteValueDictionary.Add("flightLogId", flightLogId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateSquadronLog(TFS.Web.ViewModels.FlightLogs.SquadronLogViewModel squadronLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateSquadronLog);
            callInfo.RouteValueDictionary.Add("squadronLogViewModel", squadronLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult BulkCreateSquadronLog(int flightLogId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.BulkCreateSquadronLog);
            callInfo.RouteValueDictionary.Add("flightLogId", flightLogId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult BulkCreateSquadronLog(TFS.Web.ViewModels.FlightLogs.SquadronLogViewModel squadronLogViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.BulkCreateSquadronLog);
            callInfo.RouteValueDictionary.Add("squadronLogViewModel", squadronLogViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.FileContentResult DownloadPDF(int id) {
            var callInfo = new T4MVC_FileContentResult(Area, Name, ActionNames.DownloadPDF);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class FlightProgramsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FlightProgramsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult Manage() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.Manage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditFlightProgram() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightProgram);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult RenamePosition() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.RenamePosition);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateProgramLocation() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateProgramLocation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditProgramLocation() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditProgramLocation);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FlightProgramsController Actions { get { return MVC.FlightPrograms; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FlightPrograms";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string Manage = "Manage";
            public readonly string CreateFlightProgram = "CreateFlightProgram";
            public readonly string EditFlightProgram = "EditFlightProgram";
            public readonly string CreatePosition = "CreatePosition";
            public readonly string RenamePosition = "RenamePosition";
            public readonly string CreateProgramLocation = "CreateProgramLocation";
            public readonly string EditProgramLocation = "EditProgramLocation";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string CreateFlightProgram = "~/Views/FlightPrograms/CreateFlightProgram.aspx";
            public readonly string CreatePosition = "~/Views/FlightPrograms/CreatePosition.aspx";
            public readonly string CreateProgramLocation = "~/Views/FlightPrograms/CreateProgramLocation.aspx";
            public readonly string EditFlightProgram = "~/Views/FlightPrograms/EditFlightProgram.aspx";
            public readonly string EditPosition = "~/Views/FlightPrograms/EditPosition.aspx";
            public readonly string EditProgramLocation = "~/Views/FlightPrograms/EditProgramLocation.aspx";
            public readonly string FlightProgramInfo = "~/Views/FlightPrograms/FlightProgramInfo.ascx";
            public readonly string Manage = "~/Views/FlightPrograms/Manage.aspx";
            public readonly string PositionTitle = "~/Views/FlightPrograms/PositionTitle.ascx";
            public readonly string ProgramLocationInfo = "~/Views/FlightPrograms/ProgramLocationInfo.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_FlightProgramsController: TFS.Web.Controllers.FlightProgramsController {
        public T4MVC_FlightProgramsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Manage(bool? showAllPrograms) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Manage);
            callInfo.RouteValueDictionary.Add("showAllPrograms", showAllPrograms);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateFlightProgram() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateFlightProgram);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateFlightProgram(TFS.Web.ViewModels.FlightPrograms.FlightProgramViewModel flightProgramViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateFlightProgram);
            callInfo.RouteValueDictionary.Add("flightProgramViewModel", flightProgramViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditFlightProgram(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditFlightProgram);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditFlightProgram(int id, TFS.Web.ViewModels.FlightPrograms.FlightProgramViewModel flightProgramViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditFlightProgram);
            callInfo.RouteValueDictionary.Add("id", id);
            callInfo.RouteValueDictionary.Add("flightProgramViewModel", flightProgramViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreatePosition() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreatePosition);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreatePosition(TFS.Web.ViewModels.FlightPrograms.PositionViewModel positionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreatePosition);
            callInfo.RouteValueDictionary.Add("positionViewModel", positionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult RenamePosition(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.RenamePosition);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult RenamePosition(int id, TFS.Web.ViewModels.FlightPrograms.PositionViewModel positionViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.RenamePosition);
            callInfo.RouteValueDictionary.Add("id", id);
            callInfo.RouteValueDictionary.Add("positionViewModel", positionViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateProgramLocation(int flightProgramId) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateProgramLocation);
            callInfo.RouteValueDictionary.Add("flightProgramId", flightProgramId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateProgramLocation(TFS.Web.ViewModels.FlightPrograms.ProgramLocationViewModel programLocationViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateProgramLocation);
            callInfo.RouteValueDictionary.Add("programLocationViewModel", programLocationViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditProgramLocation(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditProgramLocation);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditProgramLocation(TFS.Web.ViewModels.FlightPrograms.ProgramLocationViewModel programLocationViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditProgramLocation);
            callInfo.RouteValueDictionary.Add("programLocationViewModel", programLocationViewModel);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class ImagesController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ImagesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult StaticImage() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.StaticImage);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImagesController Actions { get { return MVC.Images; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Images";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string StaticImage = "StaticImage";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ImagesController: TFS.Web.Controllers.ImagesController {
        public T4MVC_ImagesController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult StaticImage(System.Guid id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.StaticImage);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class MessagesController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected MessagesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ListAllMessages() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ListAllMessages);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult CreateMessage() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.CreateMessage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ViewMessage() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ViewMessage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult CreateAnnouncement() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.CreateAnnouncement);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult CreateSystemAlert() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.CreateSystemAlert);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public MessagesController Actions { get { return MVC.Messages; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Messages";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string ListMessages = "ListMessages";
            public readonly string ListAllMessages = "ListAllMessages";
            public readonly string CreateMessage = "CreateMessage";
            public readonly string ViewMessage = "ViewMessage";
            public readonly string CreateAnnouncement = "CreateAnnouncement";
            public readonly string CreateSystemAlert = "CreateSystemAlert";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string CreateMessage = "~/Views/Messages/CreateMessage.aspx";
            public readonly string EditAnnouncement = "~/Views/Messages/EditAnnouncement.ascx";
            public readonly string EditMessage = "~/Views/Messages/EditMessage.aspx";
            public readonly string EditSystemAlert = "~/Views/Messages/EditSystemAlert.ascx";
            public readonly string ListMessages = "~/Views/Messages/ListMessages.aspx";
            public readonly string ViewAnnouncement = "~/Views/Messages/ViewAnnouncement.ascx";
            public readonly string ViewMessage = "~/Views/Messages/ViewMessage.aspx";
            public readonly string ViewSystemAlert = "~/Views/Messages/ViewSystemAlert.ascx";
            public readonly string ViewUserAlert = "~/Views/Messages/ViewUserAlert.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_MessagesController: TFS.Web.Controllers.MessagesController {
        public T4MVC_MessagesController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult ListMessages() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ListMessages);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ListAllMessages(TFS.Models.Messages.MessageType messageType) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ListAllMessages);
            callInfo.RouteValueDictionary.Add("messageType", messageType);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateMessage(TFS.Models.Messages.MessageType messageType) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.CreateMessage);
            callInfo.RouteValueDictionary.Add("messageType", messageType);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ViewMessage(int id) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ViewMessage);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateAnnouncement(TFS.Web.ViewModels.Messages.AnnouncementViewModel announcementViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateAnnouncement);
            callInfo.RouteValueDictionary.Add("announcementViewModel", announcementViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CreateSystemAlert(TFS.Web.ViewModels.Messages.SystemAlertViewModel systemAlertViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CreateSystemAlert);
            callInfo.RouteValueDictionary.Add("systemAlertViewModel", systemAlertViewModel);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class PersonnelRecordsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PersonnelRecordsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult List() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult EditRecord() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.EditRecord);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditPersonalInfo() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditPersonalInfo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditContactInfo() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditContactInfo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditCompanyInfo() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditCompanyInfo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult EditQualifications() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.EditQualifications);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PersonnelRecordsController Actions { get { return MVC.PersonnelRecords; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "PersonnelRecords";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = "List";
            public readonly string EditRecord = "EditRecord";
            public readonly string EditMyRecord = "EditMyRecord";
            public readonly string EditPersonalInfo = "EditPersonalInfo";
            public readonly string EditContactInfo = "EditContactInfo";
            public readonly string EditCompanyInfo = "EditCompanyInfo";
            public readonly string EditQualifications = "EditQualifications";
            public readonly string DownloadAllAsCsv = "DownloadAllAsCsv";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string EditRecord = "~/Views/PersonnelRecords/EditRecord.aspx";
            public readonly string List = "~/Views/PersonnelRecords/List.aspx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_PersonnelRecordsController: TFS.Web.Controllers.PersonnelRecordsController {
        public T4MVC_PersonnelRecordsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult List(string sortType, System.Web.UI.WebControls.SortDirection? sortDirection, int? page, int? itemsPerPage) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.List);
            callInfo.RouteValueDictionary.Add("sortType", sortType);
            callInfo.RouteValueDictionary.Add("sortDirection", sortDirection);
            callInfo.RouteValueDictionary.Add("page", page);
            callInfo.RouteValueDictionary.Add("itemsPerPage", itemsPerPage);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditRecord(string username) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditRecord);
            callInfo.RouteValueDictionary.Add("username", username);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditMyRecord() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.EditMyRecord);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditPersonalInfo(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.PersonalInfo personalInfo) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditPersonalInfo);
            callInfo.RouteValueDictionary.Add("username", username);
            callInfo.RouteValueDictionary.Add("editingMyRecord", editingMyRecord);
            callInfo.RouteValueDictionary.Add("personalInfo", personalInfo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditContactInfo(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.ContactInfo contactInfo) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditContactInfo);
            callInfo.RouteValueDictionary.Add("username", username);
            callInfo.RouteValueDictionary.Add("editingMyRecord", editingMyRecord);
            callInfo.RouteValueDictionary.Add("contactInfo", contactInfo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditCompanyInfo(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.CompanyInfo companyInfo) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditCompanyInfo);
            callInfo.RouteValueDictionary.Add("username", username);
            callInfo.RouteValueDictionary.Add("editingMyRecord", editingMyRecord);
            callInfo.RouteValueDictionary.Add("companyInfo", companyInfo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult EditQualifications(string username, bool editingMyRecord, TFS.Web.ViewModels.PersonnelRecords.QualificationViewModel qualifications) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.EditQualifications);
            callInfo.RouteValueDictionary.Add("username", username);
            callInfo.RouteValueDictionary.Add("editingMyRecord", editingMyRecord);
            callInfo.RouteValueDictionary.Add("qualifications", qualifications);
            return callInfo;
        }

        public override System.Web.Mvc.FileContentResult DownloadAllAsCsv() {
            var callInfo = new T4MVC_FileContentResult(Area, Name, ActionNames.DownloadAllAsCsv);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class SecurityController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SecurityController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult LogOn() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.LogOn);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SecurityController Actions { get { return MVC.Security; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Security";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string LogOn = "LogOn";
            public readonly string LogOff = "LogOff";
            public readonly string ChangePassword = "ChangePassword";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string ChangePassword = "~/Views/Security/ChangePassword.aspx";
            public readonly string LogOn = "~/Views/Security/LogOn.aspx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_SecurityController: TFS.Web.Controllers.SecurityController {
        public T4MVC_SecurityController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult LogOn(System.Uri returnUrl) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.LogOn);
            callInfo.RouteValueDictionary.Add("returnUrl", returnUrl);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult LogOn(string userName, string password, bool rememberMe, System.Uri returnUrl) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.LogOn);
            callInfo.RouteValueDictionary.Add("userName", userName);
            callInfo.RouteValueDictionary.Add("password", password);
            callInfo.RouteValueDictionary.Add("rememberMe", rememberMe);
            callInfo.RouteValueDictionary.Add("returnUrl", returnUrl);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult LogOff() {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.LogOff);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ChangePassword() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ChangePassword);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ChangePassword(string originalPassword, string newPassword, string confirmNewPassword) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ChangePassword);
            callInfo.RouteValueDictionary.Add("originalPassword", originalPassword);
            callInfo.RouteValueDictionary.Add("newPassword", newPassword);
            callInfo.RouteValueDictionary.Add("confirmNewPassword", confirmNewPassword);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class SiteController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SiteController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SiteController Actions { get { return MVC.Site; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Site";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string Home = "Home";
            public readonly string Services = "Services";
            public readonly string Programs = "Programs";
            public readonly string Experience = "Experience";
            public readonly string Contact = "Contact";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string SitePage = "~/Views/Site/SitePage.aspx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_SiteController: TFS.Web.Controllers.SiteController {
        public T4MVC_SiteController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.RedirectToRouteResult Index() {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Home() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Home);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Services() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Services);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Programs() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Programs);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Experience() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Experience);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Contact() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Contact);
            return callInfo;
        }

    }
}

namespace TFS.Web.Controllers {
    public partial class UsersController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UsersController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult List() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult Edit() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.Edit);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UsersController Actions { get { return MVC.Users; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Users";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Edit = "Edit";
            public readonly string Create = "Create";
        }


        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Create = "~/Views/Users/Create.aspx";
            public readonly string Edit = "~/Views/Users/Edit.aspx";
            public readonly string List = "~/Views/Users/List.aspx";
            public readonly string UserInformation = "~/Views/Users/UserInformation.ascx";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_UsersController: TFS.Web.Controllers.UsersController {
        public T4MVC_UsersController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult List(string sortType, System.Web.UI.WebControls.SortDirection? sortDirection, int? page, int? itemsPerPage, bool? showAll) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.List);
            callInfo.RouteValueDictionary.Add("sortType", sortType);
            callInfo.RouteValueDictionary.Add("sortDirection", sortDirection);
            callInfo.RouteValueDictionary.Add("page", page);
            callInfo.RouteValueDictionary.Add("itemsPerPage", itemsPerPage);
            callInfo.RouteValueDictionary.Add("showAll", showAll);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Edit(string username) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Edit);
            callInfo.RouteValueDictionary.Add("username", username);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(TFS.Web.ViewModels.UserViewModel userViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Edit);
            callInfo.RouteValueDictionary.Add("userViewModel", userViewModel);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Create() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Create);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Create(TFS.Web.ViewModels.UserViewModel userViewModel) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Create);
            callInfo.RouteValueDictionary.Add("userViewModel", userViewModel);
            return callInfo;
        }

    }
}

namespace T4MVC {
    public class SharedController {

        static readonly ViewNames s_views = new ViewNames();
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Success = "~/Views/Shared/Success.aspx";
        }
    }

}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

#endregion T4MVC
#pragma warning restore 1591


